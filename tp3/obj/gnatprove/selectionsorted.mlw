(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_short_integer__content "model_trace:" : short_short_integer }
 
 function short_short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_integer__content "model_trace:" : short_integer }
 
 function short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref #"system.ads" 1 0 0# =
  { mutable integer__content "model_trace:" : integer }
 
 function integer__ref___projection #"system.ads" 1 0 0# 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc #"system.ads" 1 0 0# 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_integer__content "model_trace:" : long_integer }
 
 function long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_long_integer__content "model_trace:" : long_long_integer }
 
 function long_long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref #"system.ads" 1 0 0# =
  { mutable natural__content "model_trace:" : natural }
 
 function natural__ref___projection #"system.ads" 1 0 0# 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc #"system.ads" 1 0 0# 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref #"system.ads" 1 0 0# =
  { mutable positive__content "model_trace:" : positive }
 
 function positive__ref___projection #"system.ads" 1 0 0# 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc #"system.ads" 1 0 0# 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"system.ads" 1 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float32.t)  =
  #"system.ads" 1 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref #"system.ads" 1 0 0# =
  { mutable short_float__content "model_trace:" : short_float }
 
 function short_float__ref___projection #"system.ads" 1 0 0# 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc #"system.ads" 1 0 0# 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"system.ads" 1 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float32.t)  =
  #"system.ads" 1 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref #"system.ads" 1 0 0# =
  { mutable float__content "model_trace:" : float }
 
 function float__ref___projection #"system.ads" 1 0 0# 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc #"system.ads" 1 0 0# 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last #"system.ads" 1 0 0# 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float64.t)  =
  #"system.ads" 1 0 0# (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref #"system.ads" 1 0 0# =
  { mutable long_float__content "model_trace:" : long_float }
 
 function long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc #"system.ads" 1 0 0# 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  255
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref #"system.ads" 1 0 0# =
  { mutable character__content "model_trace:" : character }
 
 function character__ref___projection #"system.ads" 1 0 0# 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc #"system.ads" 1 0 0# 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  65535
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_character__content "model_trace:" : wide_character }
 
 function wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_character__content "model_trace:" : wide_wide_character }
 
 function wide_wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_78 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_78) /\ (temp___idx_78 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_78)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_78))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_78 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_78) /\ (temp___idx_78 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_78)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_78))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string #"system.ads" 1 0 0# 
   (x : Main.__image) : string
 
 function from_string #"system.ads" 1 0 0# 
   (x : string) : Main.__image
 
 type string__ref #"system.ads" 1 0 0# =
  { mutable string__content "model_trace:" : string }
 
 function string__ref___projection #"system.ads" 1 0 0# 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc #"system.ads" 1 0 0# 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_84 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_84) /\ (temp___idx_84 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_84)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_84))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_84 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_84) /\ (temp___idx_84 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_84)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_84))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_string__content "model_trace:" : wide_string }
 
 function wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_90 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_90) /\ (temp___idx_90 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_90)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_90))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_90 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_90) /\ (temp___idx_90 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_90)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_90))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_string__content "model_trace:" : wide_wide_string }
 
 function wide_wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration #"system.ads" 1 0 0# 
 
 function inv_small #"system.ads" 1 0 0# 
   : Main.__fixed =
  1000000000
 
 function first #"system.ads" 1 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Main.__fixed)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type duration__ref #"system.ads" 1 0 0# =
  { mutable duration__content "model_trace:" : duration }
 
 function duration__ref___projection #"system.ads" 1 0 0# 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc #"system.ads" 1 0 0# 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref #"system.ads" 1 0 0# =
  { mutable integer_8__content "model_trace:" : integer_8 }
 
 function integer_8__ref___projection #"system.ads" 1 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc #"system.ads" 1 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref #"system.ads" 1 0 0# =
  { mutable integer_16__content "model_trace:" : integer_16 }
 
 function integer_16__ref___projection #"system.ads" 1 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc #"system.ads" 1 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref #"system.ads" 1 0 0# =
  { mutable integer_32__content "model_trace:" : integer_32 }
 
 function integer_32__ref___projection #"system.ads" 1 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc #"system.ads" 1 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref #"system.ads" 1 0 0# =
  { mutable integer_64__content "model_trace:" : integer_64 }
 
 function integer_64__ref___projection #"system.ads" 1 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc #"system.ads" 1 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref #"system.ads" 1 0 0# =
  { mutable universal_integer__content "model_trace:" : universal_integer }
 
 function universal_integer__ref___projection #"system.ads" 1 0 0# 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc #"system.ads" 1 0 0# 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "vect" defined at selectionsorted.ads:5, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_132 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_132) /\ (temp___idx_132 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_132)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_132))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_132 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_132) /\ (temp___idx_132 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_132)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_132))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "vect" defined at selectionsorted.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__vect
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 1 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__natural.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type vect #"selectionsorted.ads" 5 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type vect__ref #"selectionsorted.ads" 5 0 0# =
  { mutable vect__content "model_trace:" : vect }
 
 function vect__ref___projection #"selectionsorted.ads" 5 0 0# 
   (a : vect__ref) : vect =
  a.vect__content
 
 meta "model_projection" function vect__ref___projection
 
 meta "inline : no" function vect__ref___projection
 
 val vect__havoc #"selectionsorted.ads" 5 0 0# 
   (x : vect__ref) : unit
  writes {x}

end

(* Module for defining the constant "i" defined at selectionsorted.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Selectionsorted__swap__i
 use import "_gnatprove_standard".Main

 function i #"selectionsorted.ads" 7 0 0# "model" "model_trace:2651" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at selectionsorted.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__swap__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "j" defined at selectionsorted.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Selectionsorted__swap__j
 use import "_gnatprove_standard".Main

 function j #"selectionsorted.ads" 7 0 0# "model" "model_trace:2658" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at selectionsorted.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__swap__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v" defined at selectionsorted.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Selectionsorted__min_index__v
 use import "_gnatprove_standard".Main
 use        Selectionsorted__vect

 function v #"selectionsorted.ads" 12 0 0# "model_projected" "model_trace:2723" 
   : Selectionsorted__vect.vect
 
 function attr__ATTRIBUTE_ADDRESS #"selectionsorted.ads" 5 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at selectionsorted.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__min_index__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T10s" defined at selectionsorted.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__min_index__L9s__T10s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t10s #"selectionsorted.ads" 15 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref #"selectionsorted.ads" 15 0 0# =
  { mutable t10s__content "model_trace:" : t10s }
 
 function t10s__ref___projection #"selectionsorted.ads" 15 0 0# 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref___projection
 
 meta "inline : no" function t10s__ref___projection
 
 val t10s__havoc #"selectionsorted.ads" 15 0 0# 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "min_index" defined at selectionsorted.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Selectionsorted__min_index
 use import "_gnatprove_standard".Main
 use        Selectionsorted__vect

 function min_index #"selectionsorted.ads" 12 0 0# 
   (v : Selectionsorted__vect.vect) : int
 
 predicate min_index__function_guard #"system.ads" 1 0 0# 
   (result : int) (v : Selectionsorted__vect.vect) 

end

(* Module for axiomatizing type "T12s" defined at selectionsorted.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__selectionsort__L11s__T12s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t12s #"selectionsorted.ads" 20 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t12s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12s__ref #"selectionsorted.ads" 20 0 0# =
  { mutable t12s__content "model_trace:" : t12s }
 
 function t12s__ref___projection #"selectionsorted.ads" 20 0 0# 
   (a : t12s__ref) : t12s =
  a.t12s__content
 
 meta "model_projection" function t12s__ref___projection
 
 meta "inline : no" function t12s__ref___projection
 
 val t12s__havoc #"selectionsorted.ads" 20 0 0# 
   (x : t12s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS1bP1" defined at selectionsorted.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__swap__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 #"selectionsorted.adb" 5 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref #"selectionsorted.adb" 5 0 0# =
  { mutable tS1bP1__content "model_trace:" : tS1bP1 }
 
 function tS1bP1__ref___projection #"selectionsorted.adb" 5 0 0# 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc #"selectionsorted.adb" 5 0 0# 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at selectionsorted.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__swap__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selectionsorted__swap__TS1bP1

 type component_type #"selectionsorted.adb" 5 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Selectionsorted__swap__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b #"selectionsorted.adb" 5 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref #"selectionsorted.adb" 5 0 0# =
  { mutable s1b__content "model_trace:" : s1b }
 
 function s1b__ref___projection #"selectionsorted.adb" 5 0 0# 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc #"selectionsorted.adb" 5 0 0# 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS2bP1" defined at selectionsorted.adb:13, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__min_index__TS2bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS2bP1 #"selectionsorted.adb" 13 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS2bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS2bP1__ref #"selectionsorted.adb" 13 0 0# =
  { mutable tS2bP1__content "model_trace:" : tS2bP1 }
 
 function tS2bP1__ref___projection #"selectionsorted.adb" 13 0 0# 
   (a : tS2bP1__ref) : tS2bP1 =
  a.tS2bP1__content
 
 meta "model_projection" function tS2bP1__ref___projection
 
 meta "inline : no" function tS2bP1__ref___projection
 
 val tS2bP1__havoc #"selectionsorted.adb" 13 0 0# 
   (x : tS2bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S2b" defined at selectionsorted.adb:13, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__min_index__S2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selectionsorted__min_index__TS2bP1

 type component_type #"selectionsorted.adb" 13 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Selectionsorted__min_index__TS2bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s2b #"selectionsorted.adb" 13 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s2b__ref #"selectionsorted.adb" 13 0 0# =
  { mutable s2b__content "model_trace:" : s2b }
 
 function s2b__ref___projection #"selectionsorted.adb" 13 0 0# 
   (a : s2b__ref) : s2b =
  a.s2b__content
 
 meta "model_projection" function s2b__ref___projection
 
 meta "inline : no" function s2b__ref___projection
 
 val s2b__havoc #"selectionsorted.adb" 13 0 0# 
   (x : s2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TnS" defined at selectionsorted.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__min_index__TnS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tnS #"selectionsorted.adb" 14 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tnS, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tnS__ref #"selectionsorted.adb" 14 0 0# =
  { mutable tnS__content "model_trace:" : tnS }
 
 function tnS__ref___projection #"selectionsorted.adb" 14 0 0# 
   (a : tnS__ref) : tnS =
  a.tnS__content
 
 meta "model_projection" function tnS__ref___projection
 
 meta "inline : no" function tnS__ref___projection
 
 val tnS__havoc #"selectionsorted.adb" 14 0 0# 
   (x : tnS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3b" defined at selectionsorted.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__min_index__L_1__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t3b #"selectionsorted.adb" 17 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t3b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3b__ref #"selectionsorted.adb" 17 0 0# =
  { mutable t3b__content "model_trace:" : t3b }
 
 function t3b__ref___projection #"selectionsorted.adb" 17 0 0# 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc #"selectionsorted.adb" 17 0 0# 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T7b" defined at selectionsorted.adb:21, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__min_index__L_1__L6b__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t7b #"selectionsorted.adb" 21 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   (selectionsorted__min_index__L_1__x : int) : int
 
 predicate dynamic_property #"selectionsorted.adb" 17 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"selectionsorted.adb" 17 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t7b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7b__ref #"selectionsorted.adb" 21 0 0# =
  { mutable t7b__content "model_trace:" : t7b }
 
 function t7b__ref___projection #"selectionsorted.adb" 21 0 0# 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref___projection
 
 meta "inline : no" function t7b__ref___projection
 
 val t7b__havoc #"selectionsorted.adb" 21 0 0# 
   (x : t7b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T5b" defined at selectionsorted.adb:21, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__min_index__L_1__L4b__T5b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t5b #"selectionsorted.adb" 21 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   (selectionsorted__min_index__L_1__x : int) : int
 
 predicate dynamic_property #"selectionsorted.adb" 17 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"selectionsorted.adb" 17 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t5b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t5b__ref #"selectionsorted.adb" 21 0 0# =
  { mutable t5b__content "model_trace:" : t5b }
 
 function t5b__ref___projection #"selectionsorted.adb" 21 0 0# 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref___projection
 
 meta "inline : no" function t5b__ref___projection
 
 val t5b__havoc #"selectionsorted.adb" 21 0 0# 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS9bP1" defined at selectionsorted.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__selectionsort__TS9bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS9bP1 #"selectionsorted.adb" 27 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS9bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS9bP1__ref #"selectionsorted.adb" 27 0 0# =
  { mutable tS9bP1__content "model_trace:" : tS9bP1 }
 
 function tS9bP1__ref___projection #"selectionsorted.adb" 27 0 0# 
   (a : tS9bP1__ref) : tS9bP1 =
  a.tS9bP1__content
 
 meta "model_projection" function tS9bP1__ref___projection
 
 meta "inline : no" function tS9bP1__ref___projection
 
 val tS9bP1__havoc #"selectionsorted.adb" 27 0 0# 
   (x : tS9bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S9b" defined at selectionsorted.adb:27, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__selectionsort__S9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selectionsorted__selectionsort__TS9bP1

 type component_type #"selectionsorted.adb" 27 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Selectionsorted__selectionsort__TS9bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s9b #"selectionsorted.adb" 27 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s9b__ref #"selectionsorted.adb" 27 0 0# =
  { mutable s9b__content "model_trace:" : s9b }
 
 function s9b__ref___projection #"selectionsorted.adb" 27 0 0# 
   (a : s9b__ref) : s9b =
  a.s9b__content
 
 meta "model_projection" function s9b__ref___projection
 
 meta "inline : no" function s9b__ref___projection
 
 val s9b__havoc #"selectionsorted.adb" 27 0 0# 
   (x : s9b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10b" defined at selectionsorted.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__selectionsort__L_2__T10b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t10b #"selectionsorted.adb" 30 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   : int
 
 predicate dynamic_property #"system.ads" 1 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"system.ads" 1 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref #"selectionsorted.adb" 30 0 0# =
  { mutable t10b__content "model_trace:" : t10b }
 
 function t10b__ref___projection #"selectionsorted.adb" 30 0 0# 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref___projection
 
 meta "inline : no" function t10b__ref___projection
 
 val t10b__havoc #"selectionsorted.adb" 30 0 0# 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T11b" defined at selectionsorted.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__selectionsort__L_2__T11b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t11b #"selectionsorted.adb" 31 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   (selectionsorted__selectionsort__L_2__i : int) : int
 
 function last #"selectionsorted.adb" 30 0 0# 
   : int
 
 predicate dynamic_property #"selectionsorted.adb" 30 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"selectionsorted.adb" 30 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t11b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t11b__ref #"selectionsorted.adb" 31 0 0# =
  { mutable t11b__content "model_trace:" : t11b }
 
 function t11b__ref___projection #"selectionsorted.adb" 31 0 0# 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref___projection
 
 meta "inline : no" function t11b__ref___projection
 
 val t11b__havoc #"selectionsorted.adb" 31 0 0# 
   (x : t11b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12b" defined at selectionsorted.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__selectionsort__L_2__T12b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selectionsorted__selectionsort__L_2__T11b

 type component_type #"selectionsorted.adb" 31 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Selectionsorted__selectionsort__L_2__T11b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t12b #"selectionsorted.adb" 31 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t12b__ref #"selectionsorted.adb" 31 0 0# =
  { mutable t12b__content "model_trace:" : t12b }
 
 function t12b__ref___projection #"selectionsorted.adb" 31 0 0# 
   (a : t12b__ref) : t12b =
  a.t12b__content
 
 meta "model_projection" function t12b__ref___projection
 
 meta "inline : no" function t12b__ref___projection
 
 val t12b__havoc #"selectionsorted.adb" 31 0 0# 
   (x : t12b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T16b" defined at selectionsorted.adb:33, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__selectionsort__L_2__L15b__T16b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t16b #"selectionsorted.adb" 33 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   (selectionsorted__selectionsort__L_2__i : int) : int
 
 predicate dynamic_property #"selectionsorted.adb" 30 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"selectionsorted.adb" 30 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t16b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16b__ref #"selectionsorted.adb" 33 0 0# =
  { mutable t16b__content "model_trace:" : t16b }
 
 function t16b__ref___projection #"selectionsorted.adb" 33 0 0# 
   (a : t16b__ref) : t16b =
  a.t16b__content
 
 meta "model_projection" function t16b__ref___projection
 
 meta "inline : no" function t16b__ref___projection
 
 val t16b__havoc #"selectionsorted.adb" 33 0 0# 
   (x : t16b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14b" defined at selectionsorted.adb:33, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__selectionsort__L_2__L13b__T14b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14b #"selectionsorted.adb" 33 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int
 
 function last #"system.ads" 1 0 0# 
   (selectionsorted__selectionsort__L_2__i : int) : int
 
 predicate dynamic_property #"selectionsorted.adb" 30 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"selectionsorted.adb" 30 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14b__ref #"selectionsorted.adb" 33 0 0# =
  { mutable t14b__content "model_trace:" : t14b }
 
 function t14b__ref___projection #"selectionsorted.adb" 33 0 0# 
   (a : t14b__ref) : t14b =
  a.t14b__content
 
 meta "model_projection" function t14b__ref___projection
 
 meta "inline : no" function t14b__ref___projection
 
 val t14b__havoc #"selectionsorted.adb" 33 0 0# 
   (x : t14b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T20b" defined at selectionsorted.adb:34, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__selectionsort__L_2__L19b__T20b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t20b #"selectionsorted.adb" 34 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   (selectionsorted__selectionsort__L_2__i : int) : int
 
 function last #"selectionsorted.adb" 30 0 0# 
   : int
 
 predicate dynamic_property #"selectionsorted.adb" 30 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"selectionsorted.adb" 30 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t20b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t20b__ref #"selectionsorted.adb" 34 0 0# =
  { mutable t20b__content "model_trace:" : t20b }
 
 function t20b__ref___projection #"selectionsorted.adb" 34 0 0# 
   (a : t20b__ref) : t20b =
  a.t20b__content
 
 meta "model_projection" function t20b__ref___projection
 
 meta "inline : no" function t20b__ref___projection
 
 val t20b__havoc #"selectionsorted.adb" 34 0 0# 
   (x : t20b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T18b" defined at selectionsorted.adb:34, created in Gnat2Why.Types.Translate_Type *)
module Selectionsorted__selectionsort__L_2__L17b__T18b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t18b #"selectionsorted.adb" 34 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   (selectionsorted__selectionsort__L_2__i : int) : int
 
 function last #"selectionsorted.adb" 30 0 0# 
   : int
 
 predicate dynamic_property #"selectionsorted.adb" 30 0 0# 
   (first_int : int) (last_int : int) (x : int)  =
  #"selectionsorted.adb" 30 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t18b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18b__ref #"selectionsorted.adb" 34 0 0# =
  { mutable t18b__content "model_trace:" : t18b }
 
 function t18b__ref___projection #"selectionsorted.adb" 34 0 0# 
   (a : t18b__ref) : t18b =
  a.t18b__content
 
 meta "model_projection" function t18b__ref___projection
 
 meta "inline : no" function t18b__ref___projection
 
 val t18b__havoc #"selectionsorted.adb" 34 0 0# 
   (x : t18b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "v" defined at selectionsorted.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module Selectionsorted__swap__v
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__integer

 val v #"selectionsorted.ads" 7 0 0# "model_projected" "model_trace:2642"  : Array__Int__Standard__integer.map__ref 
 
 function v__first #"selectionsorted.ads" 7 0 0# "model_projected" "model_trace:2642'First" 
   : Standard__integer.integer
 
 function v__last #"selectionsorted.ads" 7 0 0# "model_projected" "model_trace:2642'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at selectionsorted.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__swap__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "v" defined at selectionsorted.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Selectionsorted__selectionsort__v
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__integer

 val v #"selectionsorted.ads" 17 0 0# "model_projected" "model_trace:2782"  : Array__Int__Standard__integer.map__ref 
 
 function v__first #"selectionsorted.ads" 17 0 0# "model_projected" "model_trace:2782'First" 
   : Standard__integer.integer
 
 function v__last #"selectionsorted.ads" 17 0 0# "model_projected" "model_trace:2782'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at selectionsorted.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__selectionsort__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "n" defined at selectionsorted.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Selectionsorted__swap__n
 use import "_gnatprove_standard".Main

 val n #"selectionsorted.adb" 6 0 0# "model_projected" "model_trace:2342"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at selectionsorted.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__swap__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "n" defined at selectionsorted.adb:14, created in Gnat2Why.Decls.Translate_Variable *)
module Selectionsorted__min_index__n
 use import "_gnatprove_standard".Main

 val n #"selectionsorted.adb" 14 0 0# "model_projected" "model_trace:2388"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"selectionsorted.adb" 14 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at selectionsorted.adb:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__min_index__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "x" defined at selectionsorted.adb:17, created in Gnat2Why.Decls.Translate_Variable *)
module Selectionsorted__min_index__L_1__x
 use import "_gnatprove_standard".Main

 val x #"selectionsorted.adb" 17 0 0# "model_projected" "model_trace:2415"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"selectionsorted.adb" 17 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at selectionsorted.adb:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__min_index__L_1__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "m" defined at selectionsorted.adb:28, created in Gnat2Why.Decls.Translate_Variable *)
module Selectionsorted__selectionsort__m
 use import "_gnatprove_standard".Main

 val m #"selectionsorted.adb" 28 0 0# "model_projected" "model_trace:2492"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "m" defined at selectionsorted.adb:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__selectionsort__m___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at selectionsorted.adb:30, created in Gnat2Why.Decls.Translate_Variable *)
module Selectionsorted__selectionsort__L_2__i
 use import "_gnatprove_standard".Main

 val i #"selectionsorted.adb" 30 0 0# "model_projected" "model_trace:2504"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"selectionsorted.adb" 30 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at selectionsorted.adb:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__selectionsort__L_2__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant #"selectionsorted.adb" 30 0 0# "inline" 
   (temp___expr_3 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_3)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_4 : int) (temp___skip_top_level_5 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_9 : int) (temp___is_init_6 : bool) (temp___skip_constant_7 : bool) (temp___do_toplevel_8 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_6 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_9)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_10 : int) (temp___skip_top_level_11 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_15 : int) (temp___is_init_12 : bool) (temp___skip_constant_13 : bool) (temp___do_toplevel_14 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_12 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_15)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_16 : int) (temp___skip_top_level_17 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_21 : int) (temp___is_init_18 : bool) (temp___skip_constant_19 : bool) (temp___do_toplevel_20 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_18 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_21)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_22 : int) (temp___skip_top_level_23 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_27 : int) (temp___is_init_24 : bool) (temp___skip_constant_25 : bool) (temp___do_toplevel_26 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_24 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_27)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_28 : int) (temp___skip_top_level_29 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_33 : int) (temp___is_init_30 : bool) (temp___skip_constant_31 : bool) (temp___do_toplevel_32 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_30 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_33)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_34 : int) (temp___skip_top_level_35 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_39 : int) (temp___is_init_36 : bool) (temp___skip_constant_37 : bool) (temp___do_toplevel_38 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_36 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_39)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_45 : Float32.t) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_42 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_45)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_46 : Float32.t) (temp___skip_top_level_47 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_51 : Float32.t) (temp___is_init_48 : bool) (temp___skip_constant_49 : bool) (temp___do_toplevel_50 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_48 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_51)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_52 : Float32.t) (temp___skip_top_level_53 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_57 : Float64.t) (temp___is_init_54 : bool) (temp___skip_constant_55 : bool) (temp___do_toplevel_56 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_54 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_57)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_58 : Float64.t) (temp___skip_top_level_59 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_63 : int) (temp___is_init_60 : bool) (temp___skip_constant_61 : bool) (temp___do_toplevel_62 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_60 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_63)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_64 : int) (temp___skip_top_level_65 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_69 : int) (temp___is_init_66 : bool) (temp___skip_constant_67 : bool) (temp___do_toplevel_68 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_66 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_69)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_70 : int) (temp___skip_top_level_71 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_75 : int) (temp___is_init_72 : bool) (temp___skip_constant_73 : bool) (temp___do_toplevel_74 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_72 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_75)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_76 : int) (temp___skip_top_level_77 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_82 : Standard__string.string) (temp___is_init_79 : bool) (temp___skip_constant_80 : bool) (temp___do_toplevel_81 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_80) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_82) (Standard__string.last temp___expr_82))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_88 : Standard__wide_string.wide_string) (temp___is_init_85 : bool) (temp___skip_constant_86 : bool) (temp___do_toplevel_87 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_86) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_88) (Standard__wide_string.last temp___expr_88))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_94 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_91 : bool) (temp___skip_constant_92 : bool) (temp___do_toplevel_93 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_92) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_94) (Standard__wide_wide_string.last temp___expr_94))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_99 : Standard__duration.duration) (temp___is_init_96 : bool) (temp___skip_constant_97 : bool) (temp___do_toplevel_98 : bool)  =
  #"system.ads" 1 0 0# true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_100 : Standard__duration.duration) (temp___skip_top_level_101 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_105 : int) (temp___is_init_102 : bool) (temp___skip_constant_103 : bool) (temp___do_toplevel_104 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_102 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_105)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_106 : int) (temp___skip_top_level_107 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_111 : int) (temp___is_init_108 : bool) (temp___skip_constant_109 : bool) (temp___do_toplevel_110 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_108 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_111)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_112 : int) (temp___skip_top_level_113 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_117 : int) (temp___is_init_114 : bool) (temp___skip_constant_115 : bool) (temp___do_toplevel_116 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_114 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_117)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_118 : int) (temp___skip_top_level_119 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_123 : int) (temp___is_init_120 : bool) (temp___skip_constant_121 : bool) (temp___do_toplevel_122 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_120 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_123)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_129 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_126 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_129)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_130 : int) (temp___skip_top_level_131 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module for possibly declaring a logic function for "swap" defined at selectionsorted.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Selectionsorted__swap
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "selectionsort" defined at selectionsorted.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Selectionsorted__selectionsort
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at selectionsorted.adb:17, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Selectionsorted__min_index__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at selectionsorted.adb:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__min_index__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at selectionsorted.adb:30, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Selectionsorted__selectionsort__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at selectionsorted.adb:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selectionsorted__selectionsort__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "vect" defined at selectionsorted.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__vect___axiom
 use import "_gnatprove_standard".Main
 use        Standard__natural
 use        Selectionsorted__vect

 predicate dynamic_invariant #"selectionsorted.adb" 30 0 0# "inline" 
   (temp___expr_136 : Selectionsorted__vect.vect) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool)  =
  #"selectionsorted.ads" 5 0 0# (if (temp___skip_constant_134) then (
   true) else (
   (Selectionsorted__vect.dynamic_property Standard__natural.first Standard__natural.last (Selectionsorted__vect.first temp___expr_136) (Selectionsorted__vect.last temp___expr_136))))

end

(* Module for defining the value of the update attribute at selectionsorted.ads:10, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___138
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selectionsorted__vect
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 function temp___138 #"selectionsorted.ads" 10 0 0# 
   (temp___140 : Selectionsorted__vect.vect) (temp___141 : int) (temp___142 : int) (temp___143 : int) (temp___144 : int) : Selectionsorted__vect.vect
 
 axiom def_axiom :
  (forall temp___140 #"selectionsorted.ads" 5 0 0#  : Selectionsorted__vect.vect.
  (forall temp___141 #"selectionsorted.ads" 5 0 0#  temp___142 #"selectionsorted.ads" 5 0 0#  temp___143 #"selectionsorted.ads" 5 0 0#  temp___144 #"selectionsorted.ads" 5 0 0#  : int.
   (let temp___139 = (temp___138 temp___140 temp___141 temp___142 temp___143 temp___144) in (
    ( ( ((Selectionsorted__vect.first temp___139) = (Selectionsorted__vect.first temp___140)) /\ ((Selectionsorted__vect.last temp___139) = (Selectionsorted__vect.last temp___140)) ) /\ (forall temp___145 #"selectionsorted.ads" 10 0 0#  : int.
     (if ((temp___145 = temp___143)) then (
      ((Array__Int__Standard__integer.get (Selectionsorted__vect.to_array temp___139) temp___145) = (Standard__integer__rep.of_rep temp___144))) else if ((temp___145 = temp___141)) then (
      ((Array__Int__Standard__integer.get (Selectionsorted__vect.to_array temp___139) temp___145) = (Standard__integer__rep.of_rep temp___142))) else (
      ((Array__Int__Standard__integer.get (Selectionsorted__vect.to_array temp___139) temp___145) = (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array temp___140) temp___145))))) )))
  ))

end

(* Module giving axioms for type "T10s" defined at selectionsorted.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__min_index__L9s__T10s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T12s" defined at selectionsorted.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__selectionsort__L11s__T12s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS1bP1" defined at selectionsorted.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__swap__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at selectionsorted.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__swap__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer__rep
 use        Selectionsorted__swap__v
 use        Selectionsorted__swap__S1b

 predicate dynamic_invariant #"selectionsorted.ads" 10 0 0# "inline" 
   (temp___expr_160 : Selectionsorted__swap__S1b.s1b) (temp___is_init_157 : bool) (temp___skip_constant_158 : bool) (temp___do_toplevel_159 : bool)  =
  #"selectionsorted.adb" 5 0 0# (if (temp___skip_constant_158) then (
   true) else (
   ( (Selectionsorted__swap__S1b.dynamic_property (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last) (Selectionsorted__swap__S1b.first temp___expr_160) (Selectionsorted__swap__S1b.last temp___expr_160)) /\ ( ((Selectionsorted__swap__S1b.first temp___expr_160) = (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first)) /\ ((Selectionsorted__swap__S1b.last temp___expr_160) = (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)) ) )))
 
 predicate default_initial_assumption #"selectionsorted.ads" 7 0 0# "inline" 
   (temp___expr_162 : Selectionsorted__swap__S1b.s1b) (temp___skip_top_level_163 : bool)  =
  #"selectionsorted.adb" 5 0 0# true

end

(* Module giving axioms for type "TS2bP1" defined at selectionsorted.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__min_index__TS2bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S2b" defined at selectionsorted.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__min_index__S2b___axiom
 use import "_gnatprove_standard".Main
 use        Selectionsorted__vect
 use        Selectionsorted__min_index__v
 use        Selectionsorted__min_index__S2b

 predicate dynamic_invariant #"selectionsorted.adb" 5 0 0# "inline" 
   (temp___expr_169 : Selectionsorted__min_index__S2b.s2b) (temp___is_init_166 : bool) (temp___skip_constant_167 : bool) (temp___do_toplevel_168 : bool)  =
  #"selectionsorted.adb" 13 0 0# (if (temp___skip_constant_167) then (
   true) else (
   ( (Selectionsorted__min_index__S2b.dynamic_property (Selectionsorted__vect.first Selectionsorted__min_index__v.v) (Selectionsorted__vect.last Selectionsorted__min_index__v.v) (Selectionsorted__min_index__S2b.first temp___expr_169) (Selectionsorted__min_index__S2b.last temp___expr_169)) /\ ( ((Selectionsorted__min_index__S2b.first temp___expr_169) = (Selectionsorted__vect.first Selectionsorted__min_index__v.v)) /\ ((Selectionsorted__min_index__S2b.last temp___expr_169) = (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ) )))
 
 predicate default_initial_assumption #"selectionsorted.ads" 12 0 0# "inline" 
   (temp___expr_171 : Selectionsorted__min_index__S2b.s2b) (temp___skip_top_level_172 : bool)  =
  #"selectionsorted.adb" 13 0 0# true

end

(* Module giving axioms for type "TnS" defined at selectionsorted.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__min_index__TnS___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Selectionsorted__vect
 use        Selectionsorted__min_index__v
 use        Selectionsorted__min_index__TnS

 predicate dynamic_invariant #"selectionsorted.adb" 13 0 0# "inline" 
   (temp___expr_178 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool)  =
  #"selectionsorted.adb" 14 0 0# (if (( temp___is_init_175 \/ ((Selectionsorted__min_index__TnS.first ) <= (Selectionsorted__min_index__TnS.last )) )) then (
   (Selectionsorted__min_index__TnS.dynamic_property (Selectionsorted__min_index__TnS.first ) (Selectionsorted__min_index__TnS.last ) temp___expr_178)) else true)
 
 predicate default_initial_assumption #"selectionsorted.adb" 14 0 0# "inline" 
   (temp___expr_179 : int) (temp___skip_top_level_180 : bool)  =
  #"selectionsorted.adb" 14 0 0# true
 
 axiom first__def_axiom :
  ((Selectionsorted__min_index__TnS.first ) = (Selectionsorted__vect.first Selectionsorted__min_index__v.v))
 
 axiom last__def_axiom :
  ((Selectionsorted__min_index__TnS.last ) = (Selectionsorted__vect.last Selectionsorted__min_index__v.v))

end

(* Module giving axioms for type "T3b" defined at selectionsorted.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__min_index__L_1__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at selectionsorted.adb:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__min_index__L_1__L6b__T7b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T5b" defined at selectionsorted.adb:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__min_index__L_1__L4b__T5b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS9bP1" defined at selectionsorted.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__selectionsort__TS9bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S9b" defined at selectionsorted.adb:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__selectionsort__S9b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer__rep
 use        Selectionsorted__selectionsort__v
 use        Selectionsorted__selectionsort__S9b

 predicate dynamic_invariant #"selectionsorted.ads" 12 0 0# "inline" 
   (temp___expr_184 : Selectionsorted__selectionsort__S9b.s9b) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool)  =
  #"selectionsorted.adb" 27 0 0# (if (temp___skip_constant_182) then (
   true) else (
   ( (Selectionsorted__selectionsort__S9b.dynamic_property (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last) (Selectionsorted__selectionsort__S9b.first temp___expr_184) (Selectionsorted__selectionsort__S9b.last temp___expr_184)) /\ ( ((Selectionsorted__selectionsort__S9b.first temp___expr_184) = (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first)) /\ ((Selectionsorted__selectionsort__S9b.last temp___expr_184) = (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) )))
 
 predicate default_initial_assumption #"selectionsorted.ads" 17 0 0# "inline" 
   (temp___expr_186 : Selectionsorted__selectionsort__S9b.s9b) (temp___skip_top_level_187 : bool)  =
  #"selectionsorted.adb" 27 0 0# true

end

(* Module giving axioms for type "T10b" defined at selectionsorted.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__selectionsort__L_2__T10b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11b" defined at selectionsorted.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__selectionsort__L_2__T11b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T12b" defined at selectionsorted.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__selectionsort__L_2__T12b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T16b" defined at selectionsorted.adb:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__selectionsort__L_2__L15b__T16b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14b" defined at selectionsorted.adb:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__selectionsort__L_2__L13b__T14b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T20b" defined at selectionsorted.adb:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__selectionsort__L_2__L19b__T20b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T18b" defined at selectionsorted.adb:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selectionsorted__selectionsort__L_2__L17b__T18b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for declaring a program function (and possibly an axiom) for "swap" defined at selectionsorted.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Selectionsorted__swap___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__natural
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selectionsorted__vect
 use        Array__Int__Standard__integer
 use        Temp___138

 val swap #"selectionsorted.ads" 7 0 0# 
   (v : Array__Int__Standard__integer.map__ref) (v__first : Standard__integer.integer) (v__last : Standard__integer.integer) (i : int) (j : int) : unit
  requires { #"system.ads" 1 0 0# ( ( ((Standard__integer__rep.to_rep v__first) < (Standard__integer__rep.to_rep v__last)) /\ ( ((Standard__integer__rep.to_rep v__first) <= i) /\ (i <= (Standard__integer__rep.to_rep v__last)) ) ) /\ ( ((Standard__integer__rep.to_rep v__first) <= j) /\ (j <= (Standard__integer__rep.to_rep v__last)) ) ) }
  ensures { #"selectionsorted.ads" 7 0 0# ( ((let temp___148 = (Temp___138.temp___138 (Selectionsorted__vect.of_array (old v.Array__Int__Standard__integer.map__content ) (Standard__integer__rep.to_rep v__first) (Standard__integer__rep.to_rep v__last)) i (Standard__integer__rep.to_rep (let temp___146 = (old v.Array__Int__Standard__integer.map__content ) in (
   (Array__Int__Standard__integer.get temp___146 j)))
  ) j (Standard__integer__rep.to_rep (let temp___147 = (old v.Array__Int__Standard__integer.map__content ) in (
   (Array__Int__Standard__integer.get temp___147 i)))
  )) in (
   (Array__Int__Standard__integer.bool_eq v.Array__Int__Standard__integer.map__content (Standard__integer__rep.to_rep v__first) (Standard__integer__rep.to_rep v__last) (Selectionsorted__vect.to_array temp___148) (Selectionsorted__vect.first temp___148) (Selectionsorted__vect.last temp___148))))
   = True) /\ (if (True) then (
   true) else (
   (Selectionsorted__vect.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep v__first) (Standard__integer__rep.to_rep v__last)))) ) }
  writes {v}

end

(* Module for declaring a program function (and possibly an axiom) for "min_index" defined at selectionsorted.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Selectionsorted__min_index___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__natural___axiom
 use        Array__Int__Standard__integer
 use        Selectionsorted__vect
 use        Selectionsorted__vect___axiom
 use        Selectionsorted__min_index
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val min_index #"selectionsorted.ads" 12 0 0# 
   (v : Selectionsorted__vect.vect) : int
  requires { #"system.ads" 1 0 0# ((Selectionsorted__vect.first v) <= (Selectionsorted__vect.last v)) }
  ensures { #"selectionsorted.ads" 12 0 0# ( ( (result = (Selectionsorted__min_index.min_index v)) /\ (Selectionsorted__min_index.min_index__function_guard result v) ) /\ ( (Standard__natural___axiom.dynamic_invariant result True False True) /\ ( ( ((Selectionsorted__vect.first v) <= result) /\ (result <= (Selectionsorted__vect.last v)) ) /\ (forall x #"selectionsorted.ads" 15 0 0#  "model" "model_trace:2756"  : int.
   ( ( ((Selectionsorted__vect.first v) <= x) /\ (x <= (Selectionsorted__vect.last v)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array v) result)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array v) x))) )) ) ) ) }
 
 axiom min_index__post_axiom :
  (forall v #"selectionsorted.ads" 12 0 0#  : Selectionsorted__vect.vect [(Selectionsorted__min_index.min_index v)].
   ( ( (Selectionsorted__vect___axiom.dynamic_invariant v True True True) /\ ((Selectionsorted__vect.first v) <= (Selectionsorted__vect.last v)) ) -> (let result = (Selectionsorted__min_index.min_index v) in (
    (if ((Selectionsorted__min_index.min_index__function_guard result v)) then (
     ( ( ( ((Selectionsorted__vect.first v) <= result) /\ (result <= (Selectionsorted__vect.last v)) ) /\ (forall x #"selectionsorted.ads" 15 0 0#  "model" "model_trace:2756"  : int.
      ( ( ((Selectionsorted__vect.first v) <= x) /\ (x <= (Selectionsorted__vect.last v)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array v) result)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array v) x))) )) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True) )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "selectionsort" defined at selectionsorted.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Selectionsorted__selectionsort___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__natural
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selectionsorted__vect
 use        Array__Int__Standard__integer

 val selectionsort #"selectionsorted.ads" 17 0 0# 
   (v : Array__Int__Standard__integer.map__ref) (v__first : Standard__integer.integer) (v__last : Standard__integer.integer) : unit
  requires { #"system.ads" 1 0 0# ((Standard__integer__rep.to_rep v__first) < (Standard__integer__rep.to_rep v__last)) }
  ensures { #"selectionsorted.ads" 17 0 0# ( (forall x #"selectionsorted.ads" 20 0 0#  "model" "model_trace:2807"  : int.
   ( ( ((Standard__integer__rep.to_rep v__first) <= x) /\ (x <= ((Standard__integer__rep.to_rep v__last) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get v.Array__Int__Standard__integer.map__content x)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get v.Array__Int__Standard__integer.map__content (x + 1)))) )) /\ (if (True) then (
   true) else (
   (Selectionsorted__vect.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep v__first) (Standard__integer__rep.to_rep v__last)))) ) }
  writes {v}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "selectionsorted" defined at selectionsorted.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Selectionsorted__package_def
 use import "_gnatprove_standard".Main

 let def #"selectionsorted.ads" 17 0 0# "GP_Subp:selectionsorted.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"selectionsorted.ads" 17 0 0# true }
  ensures { #"selectionsorted.ads" 17 0 0# true }
   =
  ( "GP_Sloc:selectionsorted.adb:38:1" () )
end

(* Module for checking contracts and absence of run-time errors in subprogram "swap" defined at selectionsorted.ads:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Selectionsorted__swap__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Standard__natural
 use        Standard__natural___axiom
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selectionsorted__vect
 use        Array__Int__Standard__integer
 use        Selectionsorted__swap__v
 use        Selectionsorted__swap__i
 use        Selectionsorted__swap__j
 use        Selectionsorted__swap__n
 use        Temp___138
 use        Standard__integer___axiom
 use        Standard__natural___axiom
 use        Standard__integer___axiom
 use        Selectionsorted__swap__n___axiom
 use        Selectionsorted__vect___axiom
 use        Selectionsorted__swap__v___axiom
 use        Selectionsorted__swap__i___axiom
 use        Selectionsorted__swap__j___axiom

 let def #"selectionsorted.ads" 17 0 0# "W:diverges:N" "GP_Subp:selectionsorted.ads:7" 
   (__void_param : unit)
  requires { #"selectionsorted.ads" 17 0 0# true }
  ensures { #"selectionsorted.ads" 17 0 0# ( #"selectionsorted.ads" 10 0 0# "model_vc_post" "keep_on_simp" "GP_Sloc:selectionsorted.ads:10:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:8" "comment:       post => V = V'Old'Update(I => V'Old(J), J => V'Old(I));
               ^ selectionsorted.ads:10:16:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:2902" "GP_Sloc:selectionsorted.ads:10:16" ((let temp___200 = (Temp___138.temp___138 (let temp___197 = (old Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content ) in (
   (Selectionsorted__vect.of_array temp___197 (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last))))
   Selectionsorted__swap__i.i (Standard__integer__rep.to_rep (let temp___198 = (old Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content ) in (
   (Array__Int__Standard__integer.get temp___198 Selectionsorted__swap__j.j)))
  ) Selectionsorted__swap__j.j (Standard__integer__rep.to_rep (let temp___199 = (old Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content ) in (
   (Array__Int__Standard__integer.get temp___199 Selectionsorted__swap__i.i)))
  )) in (
   (Array__Int__Standard__integer.bool_eq Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last) (Selectionsorted__vect.to_array temp___200) (Selectionsorted__vect.first temp___200) (Selectionsorted__vect.last temp___200))))
   = True) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram selectionsorted.ads:7 *)
  ;
  #"selectionsorted.ads" 5 0 0# assume { #"selectionsorted.ads" 5 0 0# (if (False) then (
   true) else (
   (Selectionsorted__vect.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)))) };
  #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__natural___axiom.dynamic_invariant Selectionsorted__swap__i.i True False True) };
  #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__natural___axiom.dynamic_invariant Selectionsorted__swap__j.j True False True) };
  #"selectionsorted.ads" 7 0 0# assume { #"selectionsorted.ads" 7 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram selectionsorted.ads:7 *)
  ;
  () (* Check for RTE in the Pre of the subprogram selectionsorted.ads:7 *)
  ;
  #"selectionsorted.ads" 7 0 0# abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb(((Standard__integer__rep.to_rep(( #"selectionsorted.ads" 9 0 0# abstract ensures {true}(let _ = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selectionsorted__swap__v.v__first ))) < (Standard__integer__rep.to_rep(( #"selectionsorted.ads" 9 0 0# abstract ensures {true}(let _ = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selectionsorted__swap__v.v__last ))))) ((Boolean.andb(((Standard__integer__rep.to_rep(( #"selectionsorted.ads" 9 0 0# abstract ensures {true}(let _ = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selectionsorted__swap__v.v__first ))) <= Selectionsorted__swap__i.i)) ((Selectionsorted__swap__i.i <= (Standard__integer__rep.to_rep(( #"selectionsorted.ads" 9 0 0# abstract ensures {true}(let _ = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selectionsorted__swap__v.v__last ))))))))) ((Boolean.andb(((Standard__integer__rep.to_rep(( #"selectionsorted.ads" 9 0 0# abstract ensures {true}(let _ = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selectionsorted__swap__v.v__first ))) <= Selectionsorted__swap__j.j)) ((Selectionsorted__swap__j.j <= (Standard__integer__rep.to_rep(( #"selectionsorted.ads" 9 0 0# abstract ensures {true}(let _ = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selectionsorted__swap__v.v__last )))))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram selectionsorted.ads:7 *)
  ;
  #"selectionsorted.ads" 7 0 0# assume { #"selectionsorted.ads" 7 0 0# ( ( ((Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) < (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)) /\ ( ((Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) <= Selectionsorted__swap__i.i) /\ (Selectionsorted__swap__i.i <= (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)) ) ) /\ ( ((Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) <= Selectionsorted__swap__j.j) /\ (Selectionsorted__swap__j.j <= (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)) ) ) };
  #"selectionsorted.ads" 7 0 0# abstract ensures {true}(let _ = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  (let temp___old_191 = #"selectionsorted.ads" 7 0 0# (any Array__Int__Standard__integer.map
  ensures {#"selectionsorted.adb" 5 0 0# (result = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content)} 
  ) in (
   ( #"selectionsorted.adb" 5 0 0# abstract ensures {true}(let _ = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   (let temp___old_193 = #"selectionsorted.ads" 7 0 0# (any Array__Int__Standard__integer.map
   ensures {#"selectionsorted.adb" 5 0 0# (result = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content)} 
   ) in (
    ( #"selectionsorted.adb" 5 0 0# abstract ensures {true}(let _ = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content in (
     ()))
     end ;
    (let temp___old_192 = #"selectionsorted.ads" 7 0 0# (any Array__Int__Standard__integer.map
    ensures {#"selectionsorted.adb" 5 0 0# (result = Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content)} 
    ) in (
     ( #"selectionsorted.adb" 5 0 0# try
      ( #"selectionsorted.adb" 6 0 0# Selectionsorted__swap__n.n.int__content <- ( (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content) (( #"selectionsorted.adb" 6 0 0# assert { #"selectionsorted.adb" 6 0 0# ( #"selectionsorted.adb" 6 0 0# "model_vc" "keep_on_simp" "GP_Sloc:selectionsorted.adb:6:23" "GP_Reason:VC_INDEX_CHECK" "GP_Id:0" "comment:      N: Integer := V(I);
                      ^ selectionsorted.adb:6:23:VC_INDEX_CHECK" "GP_Shape:n_decl__ixdcomp" ( ((Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) <= Selectionsorted__swap__i.i) /\ (Selectionsorted__swap__i.i <= (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)) ) ) };
      Selectionsorted__swap__i.i ))))) );
      #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__integer___axiom.dynamic_invariant Selectionsorted__swap__n.n.int__content True False True) };
      ( "GP_Sloc:selectionsorted.adb:8:12" #"selectionsorted.adb" 8 0 0# Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content) (( #"selectionsorted.adb" 8 0 0# assert { #"selectionsorted.adb" 8 0 0# ( #"selectionsorted.adb" 8 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:v_assign__ixdcomp" "GP_Sloc:selectionsorted.adb:8:9" "GP_Id:2" "comment:      V(I) := V(J);
        ^ selectionsorted.adb:8:9:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) <= Selectionsorted__swap__i.i) /\ (Selectionsorted__swap__i.i <= (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)) ) ) };
      Selectionsorted__swap__i.i )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content) (( #"selectionsorted.adb" 8 0 0# assert { #"selectionsorted.adb" 8 0 0# ( #"selectionsorted.adb" 8 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.adb:8:17" "GP_Id:1" "comment:      V(I) := V(J);
                ^ selectionsorted.adb:8:17:VC_INDEX_CHECK" "GP_Shape:v_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) <= Selectionsorted__swap__j.j) /\ (Selectionsorted__swap__j.j <= (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)) ) ) };
      Selectionsorted__swap__j.j ))))))))) ) );
      ( "GP_Sloc:selectionsorted.adb:9:12" #"selectionsorted.adb" 9 0 0# Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content) (( #"selectionsorted.adb" 9 0 0# assert { #"selectionsorted.adb" 9 0 0# ( #"selectionsorted.adb" 9 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:v_assign__ixdcomp" "GP_Sloc:selectionsorted.adb:9:9" "GP_Id:3" "comment:      V(J) := N;
        ^ selectionsorted.adb:9:9:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) <= Selectionsorted__swap__j.j) /\ (Selectionsorted__swap__j.j <= (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)) ) ) };
      Selectionsorted__swap__j.j )) ((Standard__integer__rep.of_rep(Selectionsorted__swap__n.n.int__content)))) ) );
      #"selectionsorted.adb" 5 0 0# raise Return__exc )
     with
      Return__exc -> ()
     end;
     #"selectionsorted.adb" 5 0 0# abstract ensures {true}(let _ = (let temp___194 = (Temp___138.temp___138((Selectionsorted__vect.of_array(temp___old_191) ((Standard__integer__rep.to_rep(Selectionsorted__swap__v.v__first))) ((Standard__integer__rep.to_rep(Selectionsorted__swap__v.v__last))))) (( #"selectionsorted.ads" 10 0 0# "model_vc" "keep_on_simp" "GP_Sloc:selectionsorted.ads:10:33" "GP_Reason:VC_RANGE_CHECK" "GP_Id:4" "comment:       post => V = V'Old'Update(I => V'Old(J), J => V'Old(I));
                                ^ selectionsorted.ads:10:33:VC_RANGE_CHECK" "GP_Shape:pragargs__cmp__update_ref__aggr" (Standard__natural.range_check_(Selectionsorted__swap__i.i)) )) ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(temp___old_192) (( #"selectionsorted.ads" 10 0 0# assert { #"selectionsorted.ads" 10 0 0# ( #"selectionsorted.ads" 10 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.ads:10:44" "GP_Id:5" "comment:       post => V = V'Old'Update(I => V'Old(J), J => V'Old(I));
                                           ^ selectionsorted.ads:10:44:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__update_ref__aggr__ixdcomp" ( ((Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) <= Selectionsorted__swap__j.j) /\ (Selectionsorted__swap__j.j <= (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)) ) ) };
     Selectionsorted__swap__j.j )))))) (( #"selectionsorted.ads" 10 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:pragargs__cmp__update_ref__aggr" "GP_Sloc:selectionsorted.ads:10:48" "GP_Id:6" "comment:       post => V = V'Old'Update(I => V'Old(J), J => V'Old(I));
                                               ^ selectionsorted.ads:10:48:VC_RANGE_CHECK" (Standard__natural.range_check_(Selectionsorted__swap__j.j)) )) ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(temp___old_193) (( #"selectionsorted.ads" 10 0 0# assert { #"selectionsorted.ads" 10 0 0# ( #"selectionsorted.ads" 10 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__update_ref__aggr__ixdcomp" "GP_Sloc:selectionsorted.ads:10:59" "GP_Id:7" "comment:       post => V = V'Old'Update(I => V'Old(J), J => V'Old(I));
                                                          ^ selectionsorted.ads:10:59:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selectionsorted__swap__v.v__first) <= Selectionsorted__swap__i.i) /\ (Selectionsorted__swap__i.i <= (Standard__integer__rep.to_rep Selectionsorted__swap__v.v__last)) ) ) };
     Selectionsorted__swap__i.i ))))))) in (
      (Array__Int__Standard__integer.bool_eq(Selectionsorted__swap__v.v.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(Selectionsorted__swap__v.v__first))) ((Standard__integer__rep.to_rep(Selectionsorted__swap__v.v__last))) ((Selectionsorted__vect.to_array(temp___194))) ((Selectionsorted__vect.first(temp___194))) ((Selectionsorted__vect.last(temp___194))))))
      in (
      ()))
      end  )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "min_index" defined at selectionsorted.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Selectionsorted__min_index__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__natural
 use        Array__Int__Standard__integer
 use        Selectionsorted__vect
 use        Selectionsorted__vect___axiom
 use        Selectionsorted__min_index__v
 use        Selectionsorted__min_index__TnS
 use        Selectionsorted__min_index__TnS___axiom
 use        Selectionsorted__min_index__n
 use        Selectionsorted__min_index__L_1
 use        Selectionsorted__min_index__L_1__T3b
 use        Selectionsorted__min_index__L_1__x
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__natural___axiom
 use        Standard__integer___axiom
 use        Selectionsorted__min_index__n___axiom
 use        Selectionsorted__min_index__L_1__x___axiom
 use        Selectionsorted__min_index__L_1___axiom
 use        Selectionsorted__vect___axiom
 use        Selectionsorted__min_index__v___axiom
 use        Selectionsorted__min_index__TnS___axiom
 use        Selectionsorted__min_index__L_1__T3b___axiom

 val selectionsorted__min_index__result #"selectionsorted.ads" 12 0 0# "model_projected" "model_trace:2716@result"  : int__ref 
 
 let def #"system.ads" 1 0 0# "W:diverges:N" "GP_Subp:selectionsorted.ads:12" 
   (__void_param : unit)
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( #"selectionsorted.ads" 15 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:selectionsorted.ads:15:16" "GP_Id:20" "comment:       post => Min_Index'Result in V'Range and (for all x in V'Range => (V(Min_Index'Result) <= V(x)));
               ^ selectionsorted.ads:15:16:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( "GP_Pretty_Ada:2752" "GP_Sloc:selectionsorted.ads:15:16" ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= selectionsorted__min_index__result.int__content) /\ (selectionsorted__min_index__result.int__content <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ) ) /\ (forall x #"selectionsorted.ads" 15 0 0#  "model" "model_trace:2756"  : int.
   ( ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= x) /\ (x <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ) -> ( "GP_Pretty_Ada:2772" "GP_Sloc:selectionsorted.ads:15:73" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array Selectionsorted__min_index__v.v) selectionsorted__min_index__result.int__content)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array Selectionsorted__min_index__v.v) x))) ) )) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram selectionsorted.ads:12 *)
  ;
  #"selectionsorted.ads" 5 0 0# assume { #"selectionsorted.ads" 5 0 0# (Selectionsorted__vect___axiom.dynamic_invariant Selectionsorted__min_index__v.v True False True) };
  #"selectionsorted.ads" 12 0 0# assume { #"selectionsorted.ads" 12 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram selectionsorted.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram selectionsorted.ads:12 *)
  ;
  #"selectionsorted.ads" 12 0 0# abstract ensures {true}(let _ = (( #"selectionsorted.ads" 12 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
   ()))
   end ;
  (Selectionsorted__vect.first(Selectionsorted__min_index__v.v)) ) <= ( #"selectionsorted.ads" 12 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
   ()))
   end ;
  (Selectionsorted__vect.last(Selectionsorted__min_index__v.v)) )) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram selectionsorted.ads:12 *)
  ;
  #"selectionsorted.ads" 12 0 0# assume { #"selectionsorted.ads" 12 0 0# ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) };
  #"selectionsorted.ads" 12 0 0# try
   ( ( #"selectionsorted.adb" 14 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:selectionsorted.adb:14:7" "GP_Id:9" "comment:      N: Integer range V'range := V'First;
      ^ selectionsorted.adb:14:7:VC_RANGE_CHECK" "GP_Shape:TnS_def" #"selectionsorted.adb" 14 0 0# (any unit
   requires {#"selectionsorted.adb" 14 0 0# ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) -> ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) >= Standard__integer.first) /\ ((Selectionsorted__vect.last Selectionsorted__min_index__v.v) <= Standard__integer.last) ) )} 
   ensures {#"selectionsorted.ads" 12 0 0# true} 
   ) );
   #"selectionsorted.adb" 14 0 0# Selectionsorted__min_index__n.n.int__content <- ( (let temp___201 = ( #"selectionsorted.adb" 14 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
    ()))
    end ;
   (Selectionsorted__vect.first(Selectionsorted__min_index__v.v)) ) in (
    ( ( #"selectionsorted.adb" 14 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:selectionsorted.adb:14:36" "GP_Id:10" "comment:      N: Integer range V'range := V'First;
                                   ^ selectionsorted.adb:14:36:VC_RANGE_CHECK" "GP_Shape:n_decl__first_ref" (Selectionsorted__min_index__TnS.range_check_((Selectionsorted__min_index__TnS.first )) ((Selectionsorted__min_index__TnS.last )) (temp___201)) );
    temp___201 )))
    );
   #"selectionsorted.adb" 14 0 0# assume { #"selectionsorted.adb" 14 0 0# (Selectionsorted__min_index__TnS___axiom.dynamic_invariant Selectionsorted__min_index__n.n.int__content True False True) };
   ( "GP_Sloc:selectionsorted.adb:16:7" (if ((( #"selectionsorted.adb" 14 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
    ()))
    end ;
   (Selectionsorted__vect.first(Selectionsorted__min_index__v.v)) ) < ( #"selectionsorted.ads" 12 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
    ()))
    end ;
   (Selectionsorted__vect.last(Selectionsorted__min_index__v.v)) ))) then (
    ( "GP_Sloc:selectionsorted.adb:17:41" (let temp___204 = ( #"selectionsorted.adb" 17 0 0# "model_vc" "keep_on_simp" "GP_Sloc:selectionsorted.adb:17:27" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:16" "comment:         for X in V'First + 1 .. V'Last loop
                          ^ selectionsorted.adb:17:27:VC_OVERFLOW_CHECK" "GP_Shape:if__L_1_while__range__add" (Standard__integer.range_check_((( #"selectionsorted.adb" 17 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
     ()))
     end ;
    (Selectionsorted__vect.first(Selectionsorted__min_index__v.v)) ) + 1))) ) in (
    (let temp___205 = ( #"selectionsorted.adb" 17 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
     ()))
     end ;
    (Selectionsorted__vect.last(Selectionsorted__min_index__v.v)) ) in (
     ( #"selectionsorted.ads" 12 0 0# Selectionsorted__min_index__L_1__x.x.int__content <- ( temp___204 );
     () (* Translation of an Ada loop from selectionsorted.adb:17 *)
     ;
     (if ((Boolean.andb((temp___204 <= Selectionsorted__min_index__L_1__x.x.int__content)) ((Selectionsorted__min_index__L_1__x.x.int__content <= temp___205)))) then (
      #"selectionsorted.adb" 17 0 0# try
       ( #"selectionsorted.adb" 17 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__L_1__x.x.int__content in (
        ()))
        end ;
       (let temp___203 = #"selectionsorted.adb" 17 0 0# (any int
       ensures {#"selectionsorted.adb" 17 0 0# (result = Selectionsorted__min_index__L_1__x.x.int__content)} 
       ) in (
        ( #"selectionsorted.adb" 17 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__n.n.int__content in (
         ()))
         end ;
        (let temp___202 = #"selectionsorted.adb" 14 0 0# (any int
        ensures {#"selectionsorted.adb" 14 0 0# (result = Selectionsorted__min_index__n.n.int__content)} 
        ) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop selectionsorted.adb:17 *)
         ;
         ( "GP_Sloc:selectionsorted.adb:18:13" (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Selectionsorted__vect.to_array(Selectionsorted__min_index__v.v))) (( #"selectionsorted.adb" 18 0 0# assert { #"selectionsorted.adb" 18 0 0# ( #"selectionsorted.adb" 18 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.adb:18:19" "GP_Id:12" "comment:            if (V(X) < V(N)) then
                  ^ selectionsorted.adb:18:19:VC_INDEX_CHECK" "GP_Shape:if__L_1_while__if__cmp__ixdcomp" ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= Selectionsorted__min_index__L_1__x.x.int__content) /\ (Selectionsorted__min_index__L_1__x.x.int__content <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ) ) };
         Selectionsorted__min_index__L_1__x.x.int__content ))))) < (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Selectionsorted__vect.to_array(Selectionsorted__min_index__v.v))) (Selectionsorted__min_index__n.n.int__content)))))) then (
          ( "GP_Sloc:selectionsorted.adb:19:18" #"selectionsorted.adb" 19 0 0# Selectionsorted__min_index__n.n.int__content <- ( ( ( #"selectionsorted.adb" 19 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:selectionsorted.adb:19:21" "GP_Id:11" "comment:               N := X;
                    ^ selectionsorted.adb:19:21:VC_RANGE_CHECK" "GP_Shape:if__L_1_while__if__n_assign" (Selectionsorted__min_index__TnS.range_check_((Selectionsorted__min_index__TnS.first )) ((Selectionsorted__min_index__TnS.last )) (Selectionsorted__min_index__L_1__x.x.int__content)) );
          Selectionsorted__min_index__L_1__x.x.int__content ) ) )) else (
          ())) );
         () (* While loop translating the Ada loop from selectionsorted.adb:17 *)
         ;
         #"selectionsorted.adb" 17 0 0# while True do
          invariant { 
           ( #"selectionsorted.adb" 21 0 0# "model_vc" "keep_on_simp" "GP_Sloc:selectionsorted.adb:21:35" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:15" "comment:            pragma Loop_Invariant(for all J in V'First .. X => (V(N) <= V(J)));
                                  ^ selectionsorted.adb:21:35:VC_LOOP_INVARIANT" "GP_Shape:if__L_1_while__pragargs__forall" (forall j #"selectionsorted.adb" 21 0 0#  "model" "model_trace:2449"  : int.
            ( ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= j) /\ (j <= Selectionsorted__min_index__L_1__x.x.int__content) ) -> ( "GP_Pretty_Ada:2466" "GP_Sloc:selectionsorted.adb:21:64" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array Selectionsorted__min_index__v.v) Selectionsorted__min_index__n.n.int__content)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array Selectionsorted__min_index__v.v) j))) ) )) )
           }
          ( () (* Assume implicit invariants from the loop selectionsorted.adb:17 *)
          ;
          #"selectionsorted.ads" 12 0 0# assume { #"selectionsorted.ads" 12 0 0# (Boolean.andb(( ( ( ( true /\ (Selectionsorted__min_index__TnS___axiom.dynamic_invariant Selectionsorted__min_index__n.n.int__content False True True) ) /\ true ) /\ (if ((((Selectionsorted__vect.first Selectionsorted__min_index__v.v) + 1) <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v))) then (
           (Selectionsorted__min_index__L_1__T3b.dynamic_property ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) + 1) (Selectionsorted__vect.last Selectionsorted__min_index__v.v) Selectionsorted__min_index__L_1__x.x.int__content)) else true) ) /\ true )) (( (((Selectionsorted__vect.first Selectionsorted__min_index__v.v) + 1) <= Selectionsorted__min_index__L_1__x.x.int__content) /\ (Selectionsorted__min_index__L_1__x.x.int__content <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ))) };
          () (* Check for absence of RTE in the invariant of loop selectionsorted.adb:17 *)
          ;
          #"selectionsorted.ads" 12 0 0# abstract ensures {true}(let _ = ( (let j = #"selectionsorted.ads" 12 0 0# (any int
          ) in (
           (if ((Boolean.andb((( #"selectionsorted.ads" 12 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
            ()))
            end ;
           (Selectionsorted__vect.first(Selectionsorted__min_index__v.v)) ) <= j)) ((j <= Selectionsorted__min_index__L_1__x.x.int__content)))) then (
            #"selectionsorted.adb" 17 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Selectionsorted__vect.to_array(Selectionsorted__min_index__v.v))) (( #"selectionsorted.adb" 21 0 0# assert { #"selectionsorted.adb" 21 0 0# ( #"selectionsorted.adb" 21 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.adb:21:67" "GP_Id:13" "comment:            pragma Loop_Invariant(for all J in V'First .. X => (V(N) <= V(J)));
                                                                  ^ selectionsorted.adb:21:67:VC_INDEX_CHECK" "GP_Shape:if__L_1_while__pragargs__forall__cmp__ixdcomp" ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= Selectionsorted__min_index__n.n.int__content) /\ (Selectionsorted__min_index__n.n.int__content <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ) ) };
            Selectionsorted__min_index__n.n.int__content ))))) <= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Selectionsorted__vect.to_array(Selectionsorted__min_index__v.v))) (( #"selectionsorted.adb" 21 0 0# assert { #"selectionsorted.adb" 21 0 0# ( #"selectionsorted.adb" 21 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:if__L_1_while__pragargs__forall__cmp__ixdcomp" "GP_Sloc:selectionsorted.adb:21:75" "GP_Id:14" "comment:            pragma Loop_Invariant(for all J in V'First .. X => (V(N) <= V(J)));
                                                                          ^ selectionsorted.adb:21:75:VC_INDEX_CHECK" ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= j) /\ (j <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ) ) };
            j )))))) in (
             ()))
             end ))))
          ;
          #"selectionsorted.adb" 21 0 0# (any bool
          requires {#"selectionsorted.adb" 21 0 0# true} 
          ensures {#"selectionsorted.adb" 21 0 0# ( (result = True) <-> (forall j #"selectionsorted.adb" 21 0 0#  "model" "model_trace:2449"  : int.
           ( ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= j) /\ (j <= Selectionsorted__min_index__L_1__x.x.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array Selectionsorted__min_index__v.v) Selectionsorted__min_index__n.n.int__content)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array Selectionsorted__min_index__v.v) j))) )) )} 
          ) ) in (
           ()))
           end ;
          () (* Loop statements appearing after the loop invariant of loop selectionsorted.adb:17 *)
          ;
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop selectionsorted.adb:17 *)
          ;
          (if ((Selectionsorted__min_index__L_1__x.x.int__content = temp___205)) then (
           #"selectionsorted.adb" 17 0 0# raise Selectionsorted__min_index__L_1.L_1));
          #"selectionsorted.adb" 17 0 0# Selectionsorted__min_index__L_1__x.x.int__content <- ( (Selectionsorted__min_index__L_1__x.x.int__content + 1) );
          ( "GP_Sloc:selectionsorted.adb:18:13" (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Selectionsorted__vect.to_array(Selectionsorted__min_index__v.v))) (( #"selectionsorted.adb" 18 0 0# assert { #"selectionsorted.adb" 18 0 0# ( #"selectionsorted.adb" 18 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.adb:18:19" "GP_Id:12" "comment:            if (V(X) < V(N)) then
                  ^ selectionsorted.adb:18:19:VC_INDEX_CHECK" "GP_Shape:if__L_1_while__if__cmp__ixdcomp" ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= Selectionsorted__min_index__L_1__x.x.int__content) /\ (Selectionsorted__min_index__L_1__x.x.int__content <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ) ) };
          Selectionsorted__min_index__L_1__x.x.int__content ))))) < (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Selectionsorted__vect.to_array(Selectionsorted__min_index__v.v))) (Selectionsorted__min_index__n.n.int__content)))))) then (
           ( "GP_Sloc:selectionsorted.adb:19:18" #"selectionsorted.adb" 19 0 0# Selectionsorted__min_index__n.n.int__content <- ( ( ( #"selectionsorted.adb" 19 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:selectionsorted.adb:19:21" "GP_Id:11" "comment:               N := X;
                    ^ selectionsorted.adb:19:21:VC_RANGE_CHECK" "GP_Shape:if__L_1_while__if__n_assign" (Selectionsorted__min_index__TnS.range_check_((Selectionsorted__min_index__TnS.first )) ((Selectionsorted__min_index__TnS.last )) (Selectionsorted__min_index__L_1__x.x.int__content)) );
           Selectionsorted__min_index__L_1__x.x.int__content ) ) )) else (
           ())) ) )
         done )))
         )))
        )
      with
       Selectionsorted__min_index__L_1.L_1 -> ()
      end)) )))
    ))
     )) else (
    ())) );
   ( "GP_Sloc:selectionsorted.adb:24:7" ( #"selectionsorted.adb" 24 0 0# selectionsorted__min_index__result.int__content <- ( ( #"selectionsorted.adb" 24 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:selectionsorted.adb:24:14" "GP_Id:17" "comment:      return N;
             ^ selectionsorted.adb:24:14:VC_RANGE_CHECK" "GP_Shape:return" (Standard__natural.range_check_(Selectionsorted__min_index__n.n.int__content)) ) );
   #"selectionsorted.adb" 24 0 0# raise Return__exc ) );
   #"selectionsorted.adb" 13 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"selectionsorted.adb" 13 0 0# abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((( #"selectionsorted.adb" 13 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
   ()))
   end ;
  (Selectionsorted__vect.first(Selectionsorted__min_index__v.v)) ) <= selectionsorted__min_index__result.int__content)) ((selectionsorted__min_index__result.int__content <= ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
   ()))
   end ;
  (Selectionsorted__vect.last(Selectionsorted__min_index__v.v)) ))))) (( (let x = #"selectionsorted.ads" 12 0 0# (any int
  ) in (
   (if ((Boolean.andb((( #"selectionsorted.ads" 12 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
    ()))
    end ;
   (Selectionsorted__vect.first(Selectionsorted__min_index__v.v)) ) <= x)) ((x <= ( #"selectionsorted.ads" 12 0 0# abstract ensures {true}(let _ = Selectionsorted__min_index__v.v in (
    ()))
    end ;
   (Selectionsorted__vect.last(Selectionsorted__min_index__v.v)) ))))) then (
    #"selectionsorted.ads" 12 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Selectionsorted__vect.to_array(Selectionsorted__min_index__v.v))) (( #"selectionsorted.ads" 15 0 0# assert { #"selectionsorted.ads" 15 0 0# ( #"selectionsorted.ads" 15 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.ads:15:85" "GP_Id:18" "comment:       post => Min_Index'Result in V'Range and (for all x in V'Range => (V(Min_Index'Result) <= V(x)));
                                                                                    ^ selectionsorted.ads:15:85:VC_INDEX_CHECK" "GP_Shape:pragargs__and__forall__cmp__ixdcomp__result_ref" ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= selectionsorted__min_index__result.int__content) /\ (selectionsorted__min_index__result.int__content <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ) ) };
    selectionsorted__min_index__result.int__content ))))) <= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Selectionsorted__vect.to_array(Selectionsorted__min_index__v.v))) (( #"selectionsorted.ads" 15 0 0# assert { #"selectionsorted.ads" 15 0 0# ( #"selectionsorted.ads" 15 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.ads:15:99" "GP_Id:19" "comment:       post => Min_Index'Result in V'Range and (for all x in V'Range => (V(Min_Index'Result) <= V(x)));
                                                                                                  ^ selectionsorted.ads:15:99:VC_INDEX_CHECK" "GP_Shape:pragargs__and__forall__cmp__ixdcomp" ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= x) /\ (x <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ) ) };
    x )))))) in (
     ()))
     end ))))
  ;
  #"selectionsorted.ads" 15 0 0# (any bool
  requires {#"selectionsorted.ads" 15 0 0# true} 
  ensures {#"selectionsorted.ads" 15 0 0# ( (result = True) <-> (forall x #"selectionsorted.ads" 15 0 0#  "model" "model_trace:2756"  : int.
   ( ( ((Selectionsorted__vect.first Selectionsorted__min_index__v.v) <= x) /\ (x <= (Selectionsorted__vect.last Selectionsorted__min_index__v.v)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array Selectionsorted__min_index__v.v) selectionsorted__min_index__result.int__content)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selectionsorted__vect.to_array Selectionsorted__min_index__v.v) x))) )) )} 
  ) ))) in (
   ()))
   end ;
  selectionsorted__min_index__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "selectionsort" defined at selectionsorted.ads:17, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Selectionsorted__selectionsort__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__natural
 use        Standard__natural___axiom
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selectionsorted__vect
 use        Selectionsorted__swap___axiom
 use        Selectionsorted__min_index___axiom
 use        Array__Int__Standard__integer
 use        Selectionsorted__selectionsort__v
 use        Selectionsorted__selectionsort__m
 use        Selectionsorted__selectionsort__L_2
 use        Selectionsorted__selectionsort__L_2__T10b
 use        Selectionsorted__selectionsort__L_2__i
 use        Selectionsorted__selectionsort__L_2__T12b
 use        Standard__integer___axiom
 use        Standard__natural___axiom
 use        Standard__integer___axiom
 use        Selectionsorted__selectionsort__m___axiom
 use        Selectionsorted__selectionsort__L_2__i___axiom
 use        Selectionsorted__selectionsort__L_2___axiom
 use        Selectionsorted__vect___axiom
 use        Selectionsorted__swap___axiom
 use        Selectionsorted__min_index___axiom
 use        Selectionsorted__selectionsort__v___axiom
 use        Selectionsorted__selectionsort__L_2__T10b___axiom
 use        Selectionsorted__selectionsort__L_2__T11b___axiom
 use        Selectionsorted__selectionsort__L_2__T12b___axiom

 let def #"system.ads" 1 0 0# "W:diverges:N" "GP_Subp:selectionsorted.ads:17" 
   (__void_param : unit)
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( #"selectionsorted.ads" 20 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:selectionsorted.ads:20:16" "GP_Id:37" "comment:       post => (for all X in V'First .. (V'Last - 1) => (V(X) <= V(X + 1)));
               ^ selectionsorted.ads:20:16:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall x #"selectionsorted.ads" 20 0 0#  "model" "model_trace:2807"  : int.
   ( ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= x) /\ (x <= ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last) - 1)) ) -> ( "GP_Pretty_Ada:2828" "GP_Sloc:selectionsorted.ads:20:57" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content x)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content (x + 1)))) ) )) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram selectionsorted.ads:17 *)
  ;
  #"selectionsorted.ads" 5 0 0# assume { #"selectionsorted.ads" 5 0 0# (if (False) then (
   true) else (
   (Selectionsorted__vect.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)))) };
  #"selectionsorted.ads" 17 0 0# assume { #"selectionsorted.ads" 17 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram selectionsorted.ads:17 *)
  ;
  () (* Check for RTE in the Pre of the subprogram selectionsorted.ads:17 *)
  ;
  #"selectionsorted.ads" 17 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep(( #"selectionsorted.ads" 19 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selectionsorted__selectionsort__v.v__first ))) < (Standard__integer__rep.to_rep(( #"selectionsorted.ads" 19 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selectionsorted__selectionsort__v.v__last )))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram selectionsorted.ads:17 *)
  ;
  #"selectionsorted.ads" 17 0 0# assume { #"selectionsorted.ads" 17 0 0# ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) < (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) };
  #"selectionsorted.ads" 17 0 0# try
   ( #"selectionsorted.ads" 17 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"selectionsorted.adb" 28 0 0# assume { #"selectionsorted.adb" 28 0 0# (Standard__natural___axiom.default_initial_assumption Selectionsorted__selectionsort__m.m.int__content False) };
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__natural___axiom.dynamic_invariant Selectionsorted__selectionsort__m.m.int__content False False True) };
   ( "GP_Sloc:selectionsorted.adb:30:24" (let temp___214 = (Standard__integer__rep.to_rep(( #"selectionsorted.adb" 30 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Selectionsorted__selectionsort__v.v__first ))) in (
   (let temp___215 = (Standard__integer__rep.to_rep(( #"selectionsorted.adb" 30 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Selectionsorted__selectionsort__v.v__last ))) in (
    ( #"selectionsorted.ads" 17 0 0# Selectionsorted__selectionsort__L_2__i.i.int__content <- ( temp___214 );
    () (* Translation of an Ada loop from selectionsorted.adb:30 *)
    ;
    (if ((Boolean.andb((temp___214 <= Selectionsorted__selectionsort__L_2__i.i.int__content)) ((Selectionsorted__selectionsort__L_2__i.i.int__content <= temp___215)))) then (
     #"selectionsorted.adb" 30 0 0# try
      ( #"selectionsorted.adb" 30 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
       ()))
       end ;
      (let temp___212 = #"selectionsorted.ads" 17 0 0# (any Array__Int__Standard__integer.map
      ensures {#"selectionsorted.adb" 27 0 0# (result = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content)} 
      ) in (
       ( #"selectionsorted.adb" 27 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__L_2__i.i.int__content in (
        ()))
        end ;
       (let temp___210 = #"selectionsorted.adb" 30 0 0# (any int
       ensures {#"selectionsorted.adb" 30 0 0# (result = Selectionsorted__selectionsort__L_2__i.i.int__content)} 
       ) in (
        ( #"selectionsorted.adb" 30 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__m.m.int__content in (
         ()))
         end ;
        (let temp___209 = #"selectionsorted.adb" 28 0 0# (any int
        ensures {#"system.ads" 1 0 0# (result = Selectionsorted__selectionsort__m.m.int__content)} 
        ) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop selectionsorted.adb:30 *)
         ;
         ( "GP_Sloc:selectionsorted.adb:31:12" #"selectionsorted.adb" 31 0 0# Selectionsorted__selectionsort__m.m.int__content <- ( ( #"selectionsorted.adb" 31 0 0# "model_vc" "keep_on_simp" "GP_Sloc:selectionsorted.adb:31:15" "GP_Reason:VC_PRECONDITION" "GP_Id:22" "comment:         M := Min_Index(V(I .. V'Last));
              ^ selectionsorted.adb:31:15:VC_PRECONDITION" "GP_Shape:L_2_while__m_assign__call_min_index" (Selectionsorted__min_index___axiom.min_index((let temp___208 = (let temp___207 = (Standard__integer__rep.to_rep(( #"selectionsorted.adb" 31 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
          ()))
          end ;
         Selectionsorted__selectionsort__v.v__last ))) in (
          (Selectionsorted__selectionsort__L_2__T12b.of_array(( #"selectionsorted.adb" 31 0 0# assert { #"selectionsorted.adb" 31 0 0# ( #"selectionsorted.adb" 31 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:selectionsorted.adb:31:25" "GP_Id:21" "comment:         M := Min_Index(V(I .. V'Last));
                        ^ selectionsorted.adb:31:25:VC_RANGE_CHECK" "GP_Shape:L_2_while__m_assign__call_min_index__slice" ( (Selectionsorted__selectionsort__L_2__i.i.int__content <= temp___207) -> ( ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= Selectionsorted__selectionsort__L_2__i.i.int__content) /\ (Selectionsorted__selectionsort__L_2__i.i.int__content <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) /\ ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= temp___207) /\ (temp___207 <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) ) ) ) };
          Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content )) (Selectionsorted__selectionsort__L_2__i.i.int__content) (temp___207))))
          in (
          (Selectionsorted__vect.of_array((Selectionsorted__selectionsort__L_2__T12b.to_array(temp___208))) ((Selectionsorted__selectionsort__L_2__T12b.first(temp___208))) ((Selectionsorted__selectionsort__L_2__T12b.last(temp___208))))))
         )) ) ) );
         ( "GP_Sloc:selectionsorted.adb:32:10" ( #"selectionsorted.adb" 32 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:L_2_while__call_swap" "GP_Sloc:selectionsorted.adb:32:10" "GP_Id:24" "comment:         Swap(V, I, M);
         ^ selectionsorted.adb:32:10:VC_PRECONDITION" (Selectionsorted__swap___axiom.swap(Selectionsorted__selectionsort__v.v) (Selectionsorted__selectionsort__v.v__first) (Selectionsorted__selectionsort__v.v__last) (( #"selectionsorted.adb" 32 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:selectionsorted.adb:32:18" "GP_Id:23" "comment:         Swap(V, I, M);
                 ^ selectionsorted.adb:32:18:VC_RANGE_CHECK" "GP_Shape:L_2_while__call_swap" (Standard__natural.range_check_(Selectionsorted__selectionsort__L_2__i.i.int__content)) )) (Selectionsorted__selectionsort__m.m.int__content)) ) );
         () (* While loop translating the Ada loop from selectionsorted.adb:30 *)
         ;
         #"selectionsorted.adb" 30 0 0# while True do
          invariant { 
           ( #"selectionsorted.adb" 33 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:selectionsorted.adb:33:32" "GP_Id:29" "comment:         pragma Loop_Invariant(for all J in V'First + 1 .. I => (V(J) >= V(J-1)));
                               ^ selectionsorted.adb:33:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" (forall j #"selectionsorted.adb" 33 0 0#  "model" "model_trace:2536"  : int.
            ( ( (((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) + 1) <= j) /\ (j <= Selectionsorted__selectionsort__L_2__i.i.int__content) ) -> ( "GP_Pretty_Ada:2555" "GP_Sloc:selectionsorted.adb:33:65" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content j)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content (j - 1)))) ) )) )
           }
          invariant { 
           ( #"selectionsorted.adb" 34 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" "GP_Sloc:selectionsorted.adb:34:32" "GP_Id:32" "comment:         pragma Loop_Invariant(for all J in I .. V'Last => (V(J) >= V(I)));
                               ^ selectionsorted.adb:34:32:VC_LOOP_INVARIANT" (forall j #"selectionsorted.adb" 34 0 0#  "model" "model_trace:2564"  : int.
            ( ( (Selectionsorted__selectionsort__L_2__i.i.int__content <= j) /\ (j <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) -> ( "GP_Pretty_Ada:2581" "GP_Sloc:selectionsorted.adb:34:60" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content j)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content Selectionsorted__selectionsort__L_2__i.i.int__content))) ) )) )
           }
          ( () (* Assume implicit invariants from the loop selectionsorted.adb:30 *)
          ;
          #"selectionsorted.adb" 30 0 0# assume { #"selectionsorted.adb" 30 0 0# (Boolean.andb(( ( ( ( ( ( true /\ (Standard__natural___axiom.dynamic_invariant Selectionsorted__selectionsort__m.m.int__content False True True) ) /\ true ) /\ (if (((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last))) then (
           (Selectionsorted__selectionsort__L_2__T10b.dynamic_property (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last) Selectionsorted__selectionsort__L_2__i.i.int__content)) else true) ) /\ true ) /\ (if (True) then (
           true) else (
           (Selectionsorted__vect.dynamic_property Standard__natural.first Standard__natural.last (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)))) ) /\ true )) (( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= Selectionsorted__selectionsort__L_2__i.i.int__content) /\ (Selectionsorted__selectionsort__L_2__i.i.int__content <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ))) };
          () (* Check for absence of RTE in the invariant of loop selectionsorted.adb:30 *)
          ;
          #"selectionsorted.ads" 17 0 0# abstract ensures {true}(let _ = ( (let j = #"selectionsorted.ads" 17 0 0# (any int
          ) in (
           (if ((Boolean.andb((( #"selectionsorted.adb" 33 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:selectionsorted.adb:33:53" "GP_Id:25" "comment:         pragma Loop_Invariant(for all J in V'First + 1 .. I => (V(J) >= V(J-1)));
                                                    ^ selectionsorted.adb:33:53:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__forall__range__add" (Standard__integer.range_check_(((Standard__integer__rep.to_rep(( #"selectionsorted.adb" 33 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
            ()))
            end ;
           Selectionsorted__selectionsort__v.v__first ))) + 1))) ) <= j)) ((j <= Selectionsorted__selectionsort__L_2__i.i.int__content)))) then (
            #"selectionsorted.adb" 30 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content) (( #"selectionsorted.adb" 33 0 0# assert { #"selectionsorted.adb" 33 0 0# ( #"selectionsorted.adb" 33 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.adb:33:68" "GP_Id:26" "comment:         pragma Loop_Invariant(for all J in V'First + 1 .. I => (V(J) >= V(J-1)));
                                                                   ^ selectionsorted.adb:33:68:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) ) };
            j ))))) >= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content) ((let temp___213 = ( #"selectionsorted.adb" 33 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:selectionsorted.adb:33:77" "GP_Id:27" "comment:         pragma Loop_Invariant(for all J in V'First + 1 .. I => (V(J) >= V(J-1)));
                                                                            ^ selectionsorted.adb:33:77:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__ixdcomp__sub" (Standard__integer.range_check_((j - 1))) ) in (
             ( #"selectionsorted.adb" 33 0 0# assert { #"selectionsorted.adb" 33 0 0# ( #"selectionsorted.adb" 33 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.adb:33:77" "GP_Shape:L_2_while__pragargs__forall__cmp__ixdcomp__sub" "GP_Id:28" "comment:         pragma Loop_Invariant(for all J in V'First + 1 .. I => (V(J) >= V(J-1)));
                                                                            ^ selectionsorted.adb:33:77:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= temp___213) /\ (temp___213 <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) ) };
             temp___213 )))
            ))))) in (
             ()))
             end ))))
          ;
          #"selectionsorted.adb" 33 0 0# (any bool
          requires {#"selectionsorted.adb" 33 0 0# true} 
          ensures {#"selectionsorted.adb" 33 0 0# ( (result = True) <-> (forall j #"selectionsorted.adb" 33 0 0#  "model" "model_trace:2536"  : int.
           ( ( (((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) + 1) <= j) /\ (j <= Selectionsorted__selectionsort__L_2__i.i.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content j)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content (j - 1)))) )) )} 
          ) ) in (
           ()))
           end ;
          #"selectionsorted.adb" 33 0 0# abstract ensures {true}(let _ = ( (let j = #"selectionsorted.adb" 33 0 0# (any int
          ) in (
           (if ((Boolean.andb((Selectionsorted__selectionsort__L_2__i.i.int__content <= j)) ((j <= (Standard__integer__rep.to_rep(( #"selectionsorted.adb" 34 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
            ()))
            end ;
           Selectionsorted__selectionsort__v.v__last ))))))) then (
            #"selectionsorted.ads" 17 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content) (( #"selectionsorted.adb" 34 0 0# assert { #"selectionsorted.adb" 34 0 0# ( #"selectionsorted.adb" 34 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__ixdcomp" "GP_Sloc:selectionsorted.adb:34:63" "GP_Id:30" "comment:         pragma Loop_Invariant(for all J in I .. V'Last => (V(J) >= V(I)));
                                                              ^ selectionsorted.adb:34:63:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) ) };
            j ))))) >= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content) (( #"selectionsorted.adb" 34 0 0# assert { #"selectionsorted.adb" 34 0 0# ( #"selectionsorted.adb" 34 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__ixdcomp" "GP_Sloc:selectionsorted.adb:34:71" "GP_Id:31" "comment:         pragma Loop_Invariant(for all J in I .. V'Last => (V(J) >= V(I)));
                                                                      ^ selectionsorted.adb:34:71:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= Selectionsorted__selectionsort__L_2__i.i.int__content) /\ (Selectionsorted__selectionsort__L_2__i.i.int__content <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) ) };
            Selectionsorted__selectionsort__L_2__i.i.int__content )))))) in (
             ()))
             end ))))
          ;
          #"selectionsorted.adb" 34 0 0# (any bool
          requires {#"selectionsorted.adb" 34 0 0# true} 
          ensures {#"selectionsorted.adb" 34 0 0# ( (result = True) <-> (forall j #"selectionsorted.adb" 34 0 0#  "model" "model_trace:2564"  : int.
           ( ( (Selectionsorted__selectionsort__L_2__i.i.int__content <= j) /\ (j <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content j)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content Selectionsorted__selectionsort__L_2__i.i.int__content))) )) )} 
          ) ) in (
           ()))
           end ;
          () (* Loop statements appearing after the loop invariant of loop selectionsorted.adb:30 *)
          ;
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop selectionsorted.adb:30 *)
          ;
          (if ((Selectionsorted__selectionsort__L_2__i.i.int__content = temp___215)) then (
           #"selectionsorted.adb" 30 0 0# raise Selectionsorted__selectionsort__L_2.L_2));
          #"selectionsorted.adb" 30 0 0# Selectionsorted__selectionsort__L_2__i.i.int__content <- ( (Selectionsorted__selectionsort__L_2__i.i.int__content + 1) );
          ( "GP_Sloc:selectionsorted.adb:31:12" #"selectionsorted.adb" 31 0 0# Selectionsorted__selectionsort__m.m.int__content <- ( ( #"selectionsorted.adb" 31 0 0# "model_vc" "keep_on_simp" "GP_Sloc:selectionsorted.adb:31:15" "GP_Reason:VC_PRECONDITION" "GP_Id:22" "comment:         M := Min_Index(V(I .. V'Last));
              ^ selectionsorted.adb:31:15:VC_PRECONDITION" "GP_Shape:L_2_while__m_assign__call_min_index" (Selectionsorted__min_index___axiom.min_index((let temp___208 = (let temp___207 = (Standard__integer__rep.to_rep(( #"selectionsorted.adb" 31 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
           ()))
           end ;
          Selectionsorted__selectionsort__v.v__last ))) in (
           (Selectionsorted__selectionsort__L_2__T12b.of_array(( #"selectionsorted.adb" 31 0 0# assert { #"selectionsorted.adb" 31 0 0# ( #"selectionsorted.adb" 31 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:selectionsorted.adb:31:25" "GP_Id:21" "comment:         M := Min_Index(V(I .. V'Last));
                        ^ selectionsorted.adb:31:25:VC_RANGE_CHECK" "GP_Shape:L_2_while__m_assign__call_min_index__slice" ( (Selectionsorted__selectionsort__L_2__i.i.int__content <= temp___207) -> ( ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= Selectionsorted__selectionsort__L_2__i.i.int__content) /\ (Selectionsorted__selectionsort__L_2__i.i.int__content <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) /\ ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= temp___207) /\ (temp___207 <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) ) ) ) };
           Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content )) (Selectionsorted__selectionsort__L_2__i.i.int__content) (temp___207))))
           in (
           (Selectionsorted__vect.of_array((Selectionsorted__selectionsort__L_2__T12b.to_array(temp___208))) ((Selectionsorted__selectionsort__L_2__T12b.first(temp___208))) ((Selectionsorted__selectionsort__L_2__T12b.last(temp___208))))))
          )) ) ) );
          ( "GP_Sloc:selectionsorted.adb:32:10" ( #"selectionsorted.adb" 32 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:L_2_while__call_swap" "GP_Sloc:selectionsorted.adb:32:10" "GP_Id:24" "comment:         Swap(V, I, M);
         ^ selectionsorted.adb:32:10:VC_PRECONDITION" (Selectionsorted__swap___axiom.swap(Selectionsorted__selectionsort__v.v) (Selectionsorted__selectionsort__v.v__first) (Selectionsorted__selectionsort__v.v__last) (( #"selectionsorted.adb" 32 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:selectionsorted.adb:32:18" "GP_Id:23" "comment:         Swap(V, I, M);
                 ^ selectionsorted.adb:32:18:VC_RANGE_CHECK" "GP_Shape:L_2_while__call_swap" (Standard__natural.range_check_(Selectionsorted__selectionsort__L_2__i.i.int__content)) )) (Selectionsorted__selectionsort__m.m.int__content)) ) ) )
         done )))
         )))
        )))
       )
     with
      Selectionsorted__selectionsort__L_2.L_2 -> ()
     end)) )))
   ))
    );
   #"selectionsorted.adb" 27 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"selectionsorted.adb" 27 0 0# abstract ensures {true}(let _ = ( (let x = #"selectionsorted.adb" 27 0 0# (any int
  ) in (
   (if ((Boolean.andb(((Standard__integer__rep.to_rep(( #"selectionsorted.ads" 20 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Selectionsorted__selectionsort__v.v__first ))) <= x)) ((x <= ( #"selectionsorted.ads" 20 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:selectionsorted.ads:20:49" "GP_Id:33" "comment:       post => (for all X in V'First .. (V'Last - 1) => (V(X) <= V(X + 1)));
                                                ^ selectionsorted.ads:20:49:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__range__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep(( #"selectionsorted.ads" 20 0 0# abstract ensures {true}(let _ = Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Selectionsorted__selectionsort__v.v__last ))) - 1))) ))))) then (
    #"selectionsorted.ads" 17 0 0# abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content) (( #"selectionsorted.ads" 20 0 0# assert { #"selectionsorted.ads" 20 0 0# ( #"selectionsorted.ads" 20 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.ads:20:60" "GP_Id:34" "comment:       post => (for all X in V'First .. (V'Last - 1) => (V(X) <= V(X + 1)));
                                                           ^ selectionsorted.ads:20:60:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= x) /\ (x <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) ) };
    x ))))) <= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content) ((let temp___217 = ( #"selectionsorted.ads" 20 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:selectionsorted.ads:20:70" "GP_Id:35" "comment:       post => (for all X in V'First .. (V'Last - 1) => (V(X) <= V(X + 1)));
                                                                     ^ selectionsorted.ads:20:70:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp__add" (Standard__integer.range_check_((x + 1))) ) in (
     ( #"selectionsorted.ads" 20 0 0# assert { #"selectionsorted.ads" 20 0 0# ( #"selectionsorted.ads" 20 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selectionsorted.ads:20:70" "GP_Shape:pragargs__forall__cmp__ixdcomp__add" "GP_Id:36" "comment:       post => (for all X in V'First .. (V'Last - 1) => (V(X) <= V(X + 1)));
                                                                     ^ selectionsorted.ads:20:70:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= temp___217) /\ (temp___217 <= (Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last)) ) ) };
     temp___217 )))
    ))))) in (
     ()))
     end ))))
  ;
  #"selectionsorted.ads" 20 0 0# (any bool
  requires {#"selectionsorted.ads" 20 0 0# true} 
  ensures {#"selectionsorted.ads" 20 0 0# ( (result = True) <-> (forall x #"selectionsorted.ads" 20 0 0#  "model" "model_trace:2807"  : int.
   ( ( ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__first) <= x) /\ (x <= ((Standard__integer__rep.to_rep Selectionsorted__selectionsort__v.v__last) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content x)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selectionsorted__selectionsort__v.v.Array__Int__Standard__integer.map__content (x + 1)))) )) )} 
  ) ) in (
   ()))
   end  )
end
