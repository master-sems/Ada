(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_short_integer__content "model_trace:" : short_short_integer }
 
 function short_short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_integer__content "model_trace:" : short_integer }
 
 function short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref #"system.ads" 1 0 0# =
  { mutable integer__content "model_trace:" : integer }
 
 function integer__ref___projection #"system.ads" 1 0 0# 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc #"system.ads" 1 0 0# 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_integer__content "model_trace:" : long_integer }
 
 function long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_long_integer__content "model_trace:" : long_long_integer }
 
 function long_long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref #"system.ads" 1 0 0# =
  { mutable natural__content "model_trace:" : natural }
 
 function natural__ref___projection #"system.ads" 1 0 0# 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc #"system.ads" 1 0 0# 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref #"system.ads" 1 0 0# =
  { mutable positive__content "model_trace:" : positive }
 
 function positive__ref___projection #"system.ads" 1 0 0# 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc #"system.ads" 1 0 0# 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"system.ads" 1 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float32.t)  =
  #"system.ads" 1 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref #"system.ads" 1 0 0# =
  { mutable short_float__content "model_trace:" : short_float }
 
 function short_float__ref___projection #"system.ads" 1 0 0# 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc #"system.ads" 1 0 0# 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"system.ads" 1 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float32.t)  =
  #"system.ads" 1 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref #"system.ads" 1 0 0# =
  { mutable float__content "model_trace:" : float }
 
 function float__ref___projection #"system.ads" 1 0 0# 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc #"system.ads" 1 0 0# 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last #"system.ads" 1 0 0# 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float64.t)  =
  #"system.ads" 1 0 0# (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref #"system.ads" 1 0 0# =
  { mutable long_float__content "model_trace:" : long_float }
 
 function long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc #"system.ads" 1 0 0# 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  255
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref #"system.ads" 1 0 0# =
  { mutable character__content "model_trace:" : character }
 
 function character__ref___projection #"system.ads" 1 0 0# 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc #"system.ads" 1 0 0# 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  65535
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_character__content "model_trace:" : wide_character }
 
 function wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_character__content "model_trace:" : wide_wide_character }
 
 function wide_wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_78 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_78) /\ (temp___idx_78 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_78)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_78))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_78 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_78) /\ (temp___idx_78 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_78)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_78))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string #"system.ads" 1 0 0# 
   (x : Main.__image) : string
 
 function from_string #"system.ads" 1 0 0# 
   (x : string) : Main.__image
 
 type string__ref #"system.ads" 1 0 0# =
  { mutable string__content "model_trace:" : string }
 
 function string__ref___projection #"system.ads" 1 0 0# 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc #"system.ads" 1 0 0# 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_84 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_84) /\ (temp___idx_84 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_84)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_84))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_84 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_84) /\ (temp___idx_84 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_84)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_84))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_string__content "model_trace:" : wide_string }
 
 function wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_90 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_90) /\ (temp___idx_90 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_90)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_90))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_90 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_90) /\ (temp___idx_90 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_90)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_90))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_string__content "model_trace:" : wide_wide_string }
 
 function wide_wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration #"system.ads" 1 0 0# 
 
 function inv_small #"system.ads" 1 0 0# 
   : Main.__fixed =
  1000000000
 
 function first #"system.ads" 1 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Main.__fixed)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type duration__ref #"system.ads" 1 0 0# =
  { mutable duration__content "model_trace:" : duration }
 
 function duration__ref___projection #"system.ads" 1 0 0# 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc #"system.ads" 1 0 0# 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref #"system.ads" 1 0 0# =
  { mutable integer_8__content "model_trace:" : integer_8 }
 
 function integer_8__ref___projection #"system.ads" 1 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc #"system.ads" 1 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref #"system.ads" 1 0 0# =
  { mutable integer_16__content "model_trace:" : integer_16 }
 
 function integer_16__ref___projection #"system.ads" 1 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc #"system.ads" 1 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref #"system.ads" 1 0 0# =
  { mutable integer_32__content "model_trace:" : integer_32 }
 
 function integer_32__ref___projection #"system.ads" 1 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc #"system.ads" 1 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref #"system.ads" 1 0 0# =
  { mutable integer_64__content "model_trace:" : integer_64 }
 
 function integer_64__ref___projection #"system.ads" 1 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc #"system.ads" 1 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref #"system.ads" 1 0 0# =
  { mutable universal_integer__content "model_trace:" : universal_integer }
 
 function universal_integer__ref___projection #"system.ads" 1 0 0# 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc #"system.ads" 1 0 0# 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "index" defined at stack_adt.ads:25, created in Gnat2Why.Types.Translate_Type *)
module Stack_adt__index
 use import "_gnatprove_standard".Main
 use import "int".Int

 type index #"stack_adt.ads" 25 0 0# 
 
 function first #"stack_adt.ads" 25 0 0# 
   : int =
  0
 
 function last #"stack_adt.ads" 25 0 0# 
   : int =
  256
 
 predicate in_range #"stack_adt.ads" 25 0 0# 
   (x : int)  =
  #"stack_adt.ads" 25 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type index__ref #"stack_adt.ads" 25 0 0# =
  { mutable index__content "model_trace:" : index }
 
 function index__ref___projection #"stack_adt.ads" 25 0 0# 
   (a : index__ref) : index =
  a.index__content
 
 meta "model_projection" function index__ref___projection
 
 meta "inline : no" function index__ref___projection
 
 val index__havoc #"stack_adt.ads" 25 0 0# 
   (x : index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "index" defined at stack_adt.ads:25, created in Gnat2Why.Types.Translate_Type *)
module Stack_adt__index__rep
 use        Stack_adt__index
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Stack_adt__index.index, 
 predicate in_range = Stack_adt__index.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "vector" defined at stack_adt.ads:26, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one #"stack_adt.ads" 25 0 0# 
   : int =
  1
 
 type component_type #"stack_adt.ads" 25 0 0# =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_132 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_132) /\ (temp___idx_132 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_132)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_132))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_132 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_132) /\ (temp___idx_132 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_132)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_132))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "vector" defined at stack_adt.ads:26, created in Gnat2Why.Types.Translate_Type *)
module Stack_adt__vector
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 type component_type #"system.ads" 1 0 0# =
  Standard__integer.integer
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__natural.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type vector #"stack_adt.ads" 26 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type vector__ref #"stack_adt.ads" 26 0 0# =
  { mutable vector__content "model_trace:" : vector }
 
 function vector__ref___projection #"stack_adt.ads" 26 0 0# 
   (a : vector__ref) : vector =
  a.vector__content
 
 meta "model_projection" function vector__ref___projection
 
 meta "inline : no" function vector__ref___projection
 
 val vector__havoc #"stack_adt.ads" 26 0 0# 
   (x : vector__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T8s" defined at stack_adt.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Stack_adt__stack__T8s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t8s #"stack_adt.ads" 31 0 0# 
 
 function first #"stack_adt.ads" 31 0 0# 
   : int =
  0
 
 function last #"stack_adt.ads" 31 0 0# 
   : int =
  256
 
 predicate in_range #"stack_adt.ads" 31 0 0# 
   (x : int)  =
  #"stack_adt.ads" 31 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t8s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t8s__ref #"stack_adt.ads" 31 0 0# =
  { mutable t8s__content "model_trace:" : t8s }
 
 function t8s__ref___projection #"stack_adt.ads" 31 0 0# 
   (a : t8s__ref) : t8s =
  a.t8s__content
 
 meta "model_projection" function t8s__ref___projection
 
 meta "inline : no" function t8s__ref___projection
 
 val t8s__havoc #"stack_adt.ads" 31 0 0# 
   (x : t8s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T8s" defined at stack_adt.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Stack_adt__stack__T8s__rep
 use        Stack_adt__stack__T8s
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Stack_adt__stack__T8s.t8s, 
 predicate in_range = Stack_adt__stack__T8s.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T9s" defined at stack_adt.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Stack_adt__stack__T9s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"stack_adt.ads" 31 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  256
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T10s" defined at stack_adt.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Stack_adt__stack__T10s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t10s #"stack_adt.ads" 31 0 0# 
 
 function first #"stack_adt.ads" 31 0 0# 
   : int =
  0
 
 function last #"stack_adt.ads" 31 0 0# 
   : int =
  256
 
 predicate in_range #"stack_adt.ads" 31 0 0# 
   (x : int)  =
  #"stack_adt.ads" 31 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t10s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t10s__ref #"stack_adt.ads" 31 0 0# =
  { mutable t10s__content "model_trace:" : t10s }
 
 function t10s__ref___projection #"stack_adt.ads" 31 0 0# 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref___projection
 
 meta "inline : no" function t10s__ref___projection
 
 val t10s__havoc #"stack_adt.ads" 31 0 0# 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T10s" defined at stack_adt.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Stack_adt__stack__T10s__rep
 use        Stack_adt__stack__T10s
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Stack_adt__stack__T10s.t10s, 
 predicate in_range = Stack_adt__stack__T10s.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T11s" defined at stack_adt.ads:31, created in Gnat2Why.Types.Translate_Type *)
module Stack_adt__stack__T11s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type #"stack_adt.ads" 31 0 0# =
  Standard__integer.integer
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  256
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "stack" defined at stack_adt.ads:28, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Stack_adt__stack__rep
 use import "_gnatprove_standard".Main
 use        Stack_adt__index
 use        Stack_adt__index__rep
 use        Stack_adt__stack__T9s
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 type __split_fields #"system.ads" 1 0 0# =
  { rec__stack_adt__stack__size "model_trace:.2686" : Stack_adt__index.index; rec__stack_adt__stack__vect "model_trace:.2697" : Array__Int__Standard__integer.map }
 
 function __split_fields_Size__projection #"stack_adt.ads" 31 0 0# "model_trace:.2686" 
   (a : __split_fields) : Stack_adt__index.index =
  a.rec__stack_adt__stack__size
 
 meta "model_projection" function __split_fields_Size__projection
 
 meta "inline : no" function __split_fields_Size__projection
 
 function __split_fields_Vect__projection #"stack_adt.ads" 28 0 0# "model_trace:.2697" 
   (a : __split_fields) : Array__Int__Standard__integer.map =
  a.rec__stack_adt__stack__vect
 
 meta "model_projection" function __split_fields_Vect__projection
 
 meta "inline : no" function __split_fields_Vect__projection
 
 type __split_fields__ref #"stack_adt.ads" 28 0 0# =
  { mutable __split_fields__content "model_trace:" : __split_fields }
 
 function __split_fields__ref___projection #"stack_adt.ads" 28 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc #"stack_adt.ads" 28 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep #"stack_adt.ads" 28 0 0# =
  { __split_fields "model_trace:" : __split_fields }
 
 function __rep___projection #"stack_adt.ads" 28 0 0# 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function to_base #"stack_adt.ads" 28 0 0# 
   (a : __rep) : __rep =
  a
 
 function of_base #"stack_adt.ads" 28 0 0# 
   (a : __rep) : __rep =
  a
 
 predicate stack_adt__stack__size__pred #"stack_adt.ads" 28 0 0# 
   (a : __rep)  =
  #"stack_adt.ads" 28 0 0# true
 
 val rec__stack_adt__stack__size_ #"stack_adt.ads" 28 0 0# 
   (a : __rep) : Stack_adt__index.index
  requires { #"stack_adt.ads" 25 0 0# (stack_adt__stack__size__pred a) }
  ensures { #"stack_adt.ads" 25 0 0# (result = a.__split_fields.rec__stack_adt__stack__size) }
 
 predicate stack_adt__stack__vect__pred #"stack_adt.ads" 28 0 0# 
   (a : __rep)  =
  #"stack_adt.ads" 28 0 0# true
 
 val rec__stack_adt__stack__vect_ #"stack_adt.ads" 28 0 0# 
   (a : __rep) : Array__Int__Standard__integer.map
  requires { #"stack_adt.ads" 31 0 0# (stack_adt__stack__vect__pred a) }
  ensures { #"stack_adt.ads" 31 0 0# (result = a.__split_fields.rec__stack_adt__stack__vect) }
 
 function bool_eq #"stack_adt.ads" 28 0 0# 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Stack_adt__index__rep.to_rep a.__split_fields.rec__stack_adt__stack__size) = (Stack_adt__index__rep.to_rep b.__split_fields.rec__stack_adt__stack__size)) /\ ((Stack_adt__stack__T9s.bool_eq a.__split_fields.rec__stack_adt__stack__vect b.__split_fields.rec__stack_adt__stack__vect) = True) )) then (
   True) else (
   False))
 
 function user_eq #"stack_adt.ads" 28 0 0# 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "stack" defined at stack_adt.ads:28, created in Gnat2Why.Types.Translate_Type *)
module Stack_adt__stack
 use export Stack_adt__stack__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type stack #"stack_adt.ads" 28 0 0# =
  __rep
 
 function value__size #"stack_adt.ads" 28 0 0# 
   : int
 
 function object__size #"stack_adt.ads" 28 0 0# 
   (a : stack) : int
 
 function value__alignment #"stack_adt.ads" 28 0 0# 
   : int
 
 function object__alignment #"stack_adt.ads" 28 0 0# 
   (a : stack) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a #"stack_adt.ads" 28 0 0#  : stack.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a #"stack_adt.ads" 28 0 0#  : stack.
   ((object__alignment a) >= 0))
 
 function stack_adt__stack__size__first__bit #"stack_adt.ads" 28 0 0# 
   : int
 
 function stack_adt__stack__size__last__bit #"stack_adt.ads" 28 0 0# 
   : int
 
 function stack_adt__stack__size__position #"stack_adt.ads" 28 0 0# 
   : int
 
 axiom stack_adt__stack__size__first__bit_axiom :
  ((stack_adt__stack__size__first__bit ) >= 0)
 
 axiom stack_adt__stack__size__last__bit_axiom :
  ((stack_adt__stack__size__last__bit ) > (stack_adt__stack__size__first__bit ))
 
 axiom stack_adt__stack__size__position_axiom :
  ((stack_adt__stack__size__position ) >= 0)
 
 function stack_adt__stack__vect__first__bit #"stack_adt.ads" 30 0 0# 
   : int
 
 function stack_adt__stack__vect__last__bit #"stack_adt.ads" 30 0 0# 
   : int
 
 function stack_adt__stack__vect__position #"stack_adt.ads" 30 0 0# 
   : int
 
 axiom stack_adt__stack__vect__first__bit_axiom :
  ((stack_adt__stack__vect__first__bit ) >= 0)
 
 axiom stack_adt__stack__vect__last__bit_axiom :
  ((stack_adt__stack__vect__last__bit ) > (stack_adt__stack__vect__first__bit ))
 
 axiom stack_adt__stack__vect__position_axiom :
  ((stack_adt__stack__vect__position ) >= 0)
 
 function dummy #"stack_adt.ads" 31 0 0# 
   : stack
 
 type stack__ref #"stack_adt.ads" 28 0 0# =
  { mutable stack__content "model_trace:" : stack }
 
 function stack__ref___projection #"stack_adt.ads" 28 0 0# 
   (a : stack__ref) : stack =
  a.stack__content
 
 meta "model_projection" function stack__ref___projection
 
 meta "inline : no" function stack__ref___projection
 
 val stack__havoc #"stack_adt.ads" 28 0 0# 
   (x : stack__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at stack_adt.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Stack_adt__is_empty__s
 use import "_gnatprove_standard".Main
 use        Stack_adt__stack

 function s #"stack_adt.ads" 6 0 0# "model_projected" "model_trace:2512" 
   : Stack_adt__stack.stack
 
 function attr__ATTRIBUTE_ADDRESS #"stack_adt.ads" 28 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at stack_adt.ads:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack_adt__is_empty__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_empty" defined at stack_adt.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack_adt__is_empty
 use import "_gnatprove_standard".Main
 use        Stack_adt__stack

 function is_empty #"stack_adt.ads" 6 0 0# 
   (s : Stack_adt__stack.stack) : bool
 
 predicate is_empty__function_guard #"stack_adt.ads" 28 0 0# 
   (result : bool) (s : Stack_adt__stack.stack) 

end

(* Module for defining the constant "s" defined at stack_adt.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Stack_adt__is_full__s
 use import "_gnatprove_standard".Main
 use        Stack_adt__stack

 function s #"stack_adt.ads" 7 0 0# "model_projected" "model_trace:2531" 
   : Stack_adt__stack.stack
 
 function attr__ATTRIBUTE_ADDRESS #"stack_adt.ads" 28 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at stack_adt.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack_adt__is_full__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_full" defined at stack_adt.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack_adt__is_full
 use import "_gnatprove_standard".Main
 use        Stack_adt__stack

 function is_full #"stack_adt.ads" 7 0 0# 
   (s : Stack_adt__stack.stack) : bool
 
 predicate is_full__function_guard #"stack_adt.ads" 28 0 0# 
   (result : bool) (s : Stack_adt__stack.stack) 

end

(* Module for defining the constant "x" defined at stack_adt.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Stack_adt__push__x
 use import "_gnatprove_standard".Main

 function x #"stack_adt.ads" 13 0 0# "model" "model_trace:2584" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at stack_adt.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack_adt__push__x___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining a ref holding the value of variable "s" defined at stack_adt.ads:9, created in Gnat2Why.Decls.Translate_Variable *)
module Stack_adt__clear__s
 use import "_gnatprove_standard".Main
 use        Stack_adt__stack

 val s__split_fields #"stack_adt.ads" 9 0 0# "model_projected" "model_trace:2550"  : Stack_adt__stack.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"stack_adt.ads" 28 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at stack_adt.ads:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack_adt__clear__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "s" defined at stack_adt.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Stack_adt__push__s
 use import "_gnatprove_standard".Main
 use        Stack_adt__stack

 val s__split_fields #"stack_adt.ads" 13 0 0# "model_projected" "model_trace:2575"  : Stack_adt__stack.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"stack_adt.ads" 28 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at stack_adt.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack_adt__push__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "s" defined at stack_adt.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Stack_adt__pop__s
 use import "_gnatprove_standard".Main
 use        Stack_adt__stack

 val s__split_fields #"stack_adt.ads" 18 0 0# "model_projected" "model_trace:2616"  : Stack_adt__stack.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"stack_adt.ads" 28 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at stack_adt.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack_adt__pop__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "x" defined at stack_adt.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Stack_adt__pop__x
 use import "_gnatprove_standard".Main

 val x #"stack_adt.ads" 18 0 0# "model_projected" "model_trace:2625"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at stack_adt.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack_adt__pop__x___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_3 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_3)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_4 : int) (temp___skip_top_level_5 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_9 : int) (temp___is_init_6 : bool) (temp___skip_constant_7 : bool) (temp___do_toplevel_8 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_6 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_9)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_10 : int) (temp___skip_top_level_11 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_15 : int) (temp___is_init_12 : bool) (temp___skip_constant_13 : bool) (temp___do_toplevel_14 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_12 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_15)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_16 : int) (temp___skip_top_level_17 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_21 : int) (temp___is_init_18 : bool) (temp___skip_constant_19 : bool) (temp___do_toplevel_20 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_18 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_21)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_22 : int) (temp___skip_top_level_23 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_27 : int) (temp___is_init_24 : bool) (temp___skip_constant_25 : bool) (temp___do_toplevel_26 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_24 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_27)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_28 : int) (temp___skip_top_level_29 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_33 : int) (temp___is_init_30 : bool) (temp___skip_constant_31 : bool) (temp___do_toplevel_32 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_30 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_33)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_34 : int) (temp___skip_top_level_35 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_39 : int) (temp___is_init_36 : bool) (temp___skip_constant_37 : bool) (temp___do_toplevel_38 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_36 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_39)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_45 : Float32.t) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_42 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_45)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_46 : Float32.t) (temp___skip_top_level_47 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_51 : Float32.t) (temp___is_init_48 : bool) (temp___skip_constant_49 : bool) (temp___do_toplevel_50 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_48 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_51)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_52 : Float32.t) (temp___skip_top_level_53 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_57 : Float64.t) (temp___is_init_54 : bool) (temp___skip_constant_55 : bool) (temp___do_toplevel_56 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_54 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_57)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_58 : Float64.t) (temp___skip_top_level_59 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_63 : int) (temp___is_init_60 : bool) (temp___skip_constant_61 : bool) (temp___do_toplevel_62 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_60 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_63)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_64 : int) (temp___skip_top_level_65 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_69 : int) (temp___is_init_66 : bool) (temp___skip_constant_67 : bool) (temp___do_toplevel_68 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_66 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_69)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_70 : int) (temp___skip_top_level_71 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_75 : int) (temp___is_init_72 : bool) (temp___skip_constant_73 : bool) (temp___do_toplevel_74 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_72 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_75)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_76 : int) (temp___skip_top_level_77 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_82 : Standard__string.string) (temp___is_init_79 : bool) (temp___skip_constant_80 : bool) (temp___do_toplevel_81 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_80) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_82) (Standard__string.last temp___expr_82))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_88 : Standard__wide_string.wide_string) (temp___is_init_85 : bool) (temp___skip_constant_86 : bool) (temp___do_toplevel_87 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_86) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_88) (Standard__wide_string.last temp___expr_88))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_94 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_91 : bool) (temp___skip_constant_92 : bool) (temp___do_toplevel_93 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_92) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_94) (Standard__wide_wide_string.last temp___expr_94))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_99 : Standard__duration.duration) (temp___is_init_96 : bool) (temp___skip_constant_97 : bool) (temp___do_toplevel_98 : bool)  =
  #"system.ads" 1 0 0# true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_100 : Standard__duration.duration) (temp___skip_top_level_101 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_105 : int) (temp___is_init_102 : bool) (temp___skip_constant_103 : bool) (temp___do_toplevel_104 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_102 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_105)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_106 : int) (temp___skip_top_level_107 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_111 : int) (temp___is_init_108 : bool) (temp___skip_constant_109 : bool) (temp___do_toplevel_110 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_108 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_111)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_112 : int) (temp___skip_top_level_113 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_117 : int) (temp___is_init_114 : bool) (temp___skip_constant_115 : bool) (temp___do_toplevel_116 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_114 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_117)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_118 : int) (temp___skip_top_level_119 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_123 : int) (temp___is_init_120 : bool) (temp___skip_constant_121 : bool) (temp___do_toplevel_122 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_120 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_123)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_129 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_126 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_129)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_130 : int) (temp___skip_top_level_131 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module for possibly declaring a logic function for "clear" defined at stack_adt.ads:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack_adt__clear
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "push" defined at stack_adt.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack_adt__push
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "pop" defined at stack_adt.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack_adt__pop
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "index" defined at stack_adt.ads:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack_adt__index___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Stack_adt__index

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_136 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool)  =
  #"stack_adt.ads" 25 0 0# (if (( temp___is_init_133 \/ (Stack_adt__index.first <= Stack_adt__index.last) )) then (
   (Stack_adt__index.dynamic_property Stack_adt__index.first Stack_adt__index.last temp___expr_136)) else true)
 
 predicate default_initial_assumption #"stack_adt.ads" 25 0 0# "inline" 
   (temp___expr_137 : int) (temp___skip_top_level_138 : bool)  =
  #"stack_adt.ads" 25 0 0# true

end

(* Module giving axioms for type "vector" defined at stack_adt.ads:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack_adt__vector___axiom
 use import "_gnatprove_standard".Main
 use        Standard__natural
 use        Stack_adt__vector

 predicate dynamic_invariant #"stack_adt.ads" 25 0 0# "inline" 
   (temp___expr_142 : Stack_adt__vector.vector) (temp___is_init_139 : bool) (temp___skip_constant_140 : bool) (temp___do_toplevel_141 : bool)  =
  #"stack_adt.ads" 26 0 0# (if (temp___skip_constant_140) then (
   true) else (
   (Stack_adt__vector.dynamic_property Standard__natural.first Standard__natural.last (Stack_adt__vector.first temp___expr_142) (Stack_adt__vector.last temp___expr_142))))

end

(* Module giving axioms for type "T8s" defined at stack_adt.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack_adt__stack__T8s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T9s" defined at stack_adt.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack_adt__stack__T9s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T10s" defined at stack_adt.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack_adt__stack__T10s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11s" defined at stack_adt.ads:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack_adt__stack__T11s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of the aggregate at stack_adt.ads:31, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp___151
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 function temp___151 #"stack_adt.ads" 31 0 0# 
   (temp___153 : int) : Array__Int__Standard__integer.map
 
 axiom def_axiom :
  (forall temp___153 #"stack_adt.ads" 31 0 0#  : int.
   (let temp___152 = (temp___151 temp___153) in (
    (forall temp___154 #"stack_adt.ads" 31 0 0#  : int.
     ((Array__Int__Standard__integer.get temp___152 temp___154) = (Standard__integer__rep.of_rep temp___153)))))
  )

end

(* Module giving axioms for type "stack" defined at stack_adt.ads:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack_adt__stack___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Stack_adt__index
 use        Stack_adt__index__rep
 use        Stack_adt__stack
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Temp___151
 use        Array__Int__Standard__integer

 predicate dynamic_invariant #"stack_adt.ads" 31 0 0# "inline" 
   (temp___expr_147 : Stack_adt__stack.stack) (temp___is_init_144 : bool) (temp___skip_constant_145 : bool) (temp___do_toplevel_146 : bool)  =
  #"stack_adt.ads" 28 0 0# true
 
 predicate default_initial_assumption #"stack_adt.ads" 28 0 0# "inline" 
   (temp___expr_149 : Stack_adt__stack.stack) (temp___skip_top_level_150 : bool)  =
  #"stack_adt.ads" 28 0 0# ( (if ((Stack_adt__stack.stack_adt__stack__size__pred temp___expr_149)) then (
   ((Stack_adt__index__rep.to_rep (Stack_adt__stack.rec__stack_adt__stack__size (Stack_adt__stack.__split_fields temp___expr_149))) = 0)) else true) /\ (if ((Stack_adt__stack.stack_adt__stack__vect__pred temp___expr_149)) then (
   ((Stack_adt__stack.rec__stack_adt__stack__vect (Stack_adt__stack.__split_fields temp___expr_149)) = (Temp___151.temp___151 0))) else true) )

end
(* Module giving a program function and a defining axiom for the expression function "is_empty" defined at stack_adt.ads:6, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Stack_adt__is_empty___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Stack_adt__index
 use        Stack_adt__index__rep
 use        Stack_adt__stack
 use        Stack_adt__is_empty

 val is_empty #"stack_adt.ads" 6 0 0# 
   (s : Stack_adt__stack.stack) : bool
  requires { #"stack_adt.ads" 28 0 0# true }
  ensures { #"stack_adt.ads" 28 0 0# ( ( (result = (Stack_adt__is_empty.is_empty s)) /\ (Stack_adt__is_empty.is_empty__function_guard result s) ) /\ ( (result = True) <-> ((Stack_adt__index__rep.to_rep (Stack_adt__stack.rec__stack_adt__stack__size (Stack_adt__stack.__split_fields s))) = 0) ) ) }
 
 axiom is_empty__def_axiom :
  (forall s #"stack_adt.ads" 6 0 0#  : Stack_adt__stack.stack [(Stack_adt__is_empty.is_empty s)].
   ( (let result = (Stack_adt__is_empty.is_empty s) in (
    (Stack_adt__is_empty.is_empty__function_guard result s)))
    -> ( ((Stack_adt__is_empty.is_empty s) = True) <-> ((Stack_adt__index__rep.to_rep (Stack_adt__stack.rec__stack_adt__stack__size (Stack_adt__stack.__split_fields s))) = 0) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "is_full" defined at stack_adt.ads:7, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Stack_adt__is_full___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Stack_adt__index
 use        Stack_adt__index__rep
 use        Stack_adt__stack
 use        Stack_adt__is_full

 val is_full #"stack_adt.ads" 7 0 0# 
   (s : Stack_adt__stack.stack) : bool
  requires { #"stack_adt.ads" 28 0 0# true }
  ensures { #"stack_adt.ads" 28 0 0# ( ( (result = (Stack_adt__is_full.is_full s)) /\ (Stack_adt__is_full.is_full__function_guard result s) ) /\ ( (result = True) <-> ((Stack_adt__index__rep.to_rep (Stack_adt__stack.rec__stack_adt__stack__size (Stack_adt__stack.__split_fields s))) = 256) ) ) }
 
 axiom is_full__def_axiom :
  (forall s #"stack_adt.ads" 7 0 0#  : Stack_adt__stack.stack [(Stack_adt__is_full.is_full s)].
   ( (let result = (Stack_adt__is_full.is_full s) in (
    (Stack_adt__is_full.is_full__function_guard result s)))
    -> ( ((Stack_adt__is_full.is_full s) = True) <-> ((Stack_adt__index__rep.to_rep (Stack_adt__stack.rec__stack_adt__stack__size (Stack_adt__stack.__split_fields s))) = 256) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "clear" defined at stack_adt.ads:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack_adt__clear___axiom
 use import "_gnatprove_standard".Main
 use        Stack_adt__stack
 use        Stack_adt__stack___axiom
 use        Stack_adt__is_empty

 val clear #"stack_adt.ads" 9 0 0# 
   (s__split_fields : Stack_adt__stack.__split_fields__ref) : unit
  requires { #"stack_adt.ads" 28 0 0# true }
  ensures { #"stack_adt.ads" 28 0 0# ( ((epsilon temp___result_159 : bool.
   ( (temp___result_159 = (Stack_adt__is_empty.is_empty { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content })) /\ (Stack_adt__is_empty.is_empty__function_guard temp___result_159 { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content }) )) = True) /\ (Stack_adt__stack___axiom.dynamic_invariant { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content } True True True) ) }
  writes {s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "push" defined at stack_adt.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack_adt__push___axiom
 use import "_gnatprove_standard".Main
 use        Stack_adt__stack
 use        Stack_adt__stack___axiom
 use        Stack_adt__is_empty
 use        Stack_adt__is_full

 val push #"stack_adt.ads" 13 0 0# 
   (s__split_fields : Stack_adt__stack.__split_fields__ref) (x : int) : unit
  requires { #"system.ads" 1 0 0# not ( ((epsilon temp___result_162 : bool.
   ( (temp___result_162 = (Stack_adt__is_full.is_full { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content })) /\ (Stack_adt__is_full.is_full__function_guard temp___result_162 { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content }) )) = True) ) }
  ensures { #"stack_adt.ads" 28 0 0# ( not ( ((epsilon temp___result_163 : bool.
   ( (temp___result_163 = (Stack_adt__is_empty.is_empty { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content })) /\ (Stack_adt__is_empty.is_empty__function_guard temp___result_163 { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content }) )) = True) ) /\ (Stack_adt__stack___axiom.dynamic_invariant { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content } True True True) ) }
  writes {s__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "pop" defined at stack_adt.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack_adt__pop___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer___axiom
 use        Stack_adt__stack
 use        Stack_adt__stack___axiom
 use        Stack_adt__is_empty
 use        Stack_adt__is_full

 val pop #"stack_adt.ads" 18 0 0# 
   (s__split_fields : Stack_adt__stack.__split_fields__ref) (x : int__ref) : unit
  requires { #"system.ads" 1 0 0# not ( ((epsilon temp___result_166 : bool.
   ( (temp___result_166 = (Stack_adt__is_empty.is_empty { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content })) /\ (Stack_adt__is_empty.is_empty__function_guard temp___result_166 { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content }) )) = True) ) }
  ensures { #"stack_adt.ads" 28 0 0# ( not ( ((epsilon temp___result_167 : bool.
   ( (temp___result_167 = (Stack_adt__is_full.is_full { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content })) /\ (Stack_adt__is_full.is_full__function_guard temp___result_167 { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content }) )) = True) ) /\ ( (Stack_adt__stack___axiom.dynamic_invariant { Stack_adt__stack.__split_fields = s__split_fields.Stack_adt__stack.__split_fields__content } True True True) /\ (Standard__integer___axiom.dynamic_invariant x.int__content True True True) ) ) }
  writes {s__split_fields, x}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "stack_adt" defined at stack_adt.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Stack_adt__package_def
 use import "_gnatprove_standard".Main

 let def #"stack_adt.ads" 18 0 0# "GP_Subp:stack_adt.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"stack_adt.ads" 18 0 0# true }
  ensures { #"stack_adt.ads" 18 0 0# true }
   =
  ( "GP_Sloc:stack_adt.adb:27:1" () )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "stack" defined at stack_adt.ads:4, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Stack_adt__stack__default_checks
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Stack_adt__stack__T8s
 use        Stack_adt__stack__T10s
 use        Stack_adt__stack
 use        Temp___151
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Stack_adt__index___axiom
 use        Stack_adt__stack___axiom
 use        Stack_adt__stack__T8s___axiom
 use        Stack_adt__stack__T10s___axiom

 let def #"stack_adt.ads" 18 0 0# "W:diverges:N" "GP_Subp:stack_adt.ads:4" 
   (__void_param : unit)
  requires { #"stack_adt.ads" 18 0 0# true }
  ensures { #"stack_adt.ads" 18 0 0# true }
   =
  (let temp___170 = #"stack_adt.ads" 28 0 0# (any Stack_adt__stack.stack
  requires {#"stack_adt.ads" 28 0 0# true} 
  ensures {#"stack_adt.ads" 28 0 0# true} 
  ) in (
   ( (if ((Stack_adt__stack.stack_adt__stack__size__pred(temp___170))) then (
    #"stack_adt.ads" 28 0 0# abstract ensures {true}(let _ = 0 in (
     ()))
     end ));
   (if ((Stack_adt__stack.stack_adt__stack__vect__pred(temp___170))) then (
    #"stack_adt.ads" 28 0 0# abstract ensures {true}(let _ = ( #"stack_adt.ads" 31 0 0# assert { #"stack_adt.ads" 31 0 0# ( #"stack_adt.ads" 31 0 0# "model_vc" "keep_on_simp" "GP_Sloc:stack_adt.ads:31:43" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:0" "comment:         Vect: Vector(0 .. Index'Last) := (others => 0);
                                          ^ stack_adt.ads:31:43:VC_LENGTH_CHECK" "GP_Shape:stack_def__aggr" ((if ((Stack_adt__stack__T10s.first <= Stack_adt__stack__T10s.last)) then (
     ((Stack_adt__stack__T10s.last - Stack_adt__stack__T10s.first) + 1)) else (
     0)) = (if ((Stack_adt__stack__T8s.first <= Stack_adt__stack__T8s.last)) then (
     ((Stack_adt__stack__T8s.last - Stack_adt__stack__T8s.first) + 1)) else (
     0))) ) };
    (Temp___151.temp___151(0)) ) in (
     ()))
     end )) )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "is_empty" defined at stack_adt.ads:6, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack_adt__is_empty__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Stack_adt__index
 use        Stack_adt__index__rep
 use        Stack_adt__stack
 use        Stack_adt__stack___axiom
 use        Stack_adt__is_empty__s
 use        Stack_adt__is_empty__s___axiom
 use        Stack_adt__index___axiom
 use        Stack_adt__stack___axiom

 val stack_adt__is_empty__result #"stack_adt.ads" 6 0 0# "model_projected" "model_trace:2505@result"  : bool__ref 
 
 let def #"stack_adt.ads" 6 0 0# "W:diverges:N" "GP_Subp:stack_adt.ads:6" 
   (__void_param : unit)
  requires { #"stack_adt.ads" 6 0 0# true }
  ensures { #"stack_adt.ads" 6 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram stack_adt.ads:6 *)
  ;
  #"stack_adt.ads" 4 0 0# assume { #"stack_adt.ads" 4 0 0# (Stack_adt__stack___axiom.dynamic_invariant Stack_adt__is_empty__s.s True False True) };
  #"stack_adt.ads" 6 0 0# assume { #"stack_adt.ads" 6 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stack_adt.ads:6 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stack_adt.ads:6 *)
  ;
  #"stack_adt.ads" 6 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stack_adt.ads:6 *)
  ;
  #"stack_adt.ads" 6 0 0# assume { #"stack_adt.ads" 6 0 0# true };
  #"stack_adt.ads" 6 0 0# try
   ( ( "GP_Sloc:stack_adt.adb:5:15" ( #"stack_adt.adb" 5 0 0# stack_adt__is_empty__result.bool__content <- ( ((Stack_adt__index__rep.to_rep((Stack_adt__stack.rec__stack_adt__stack__size((Stack_adt__stack.__split_fields(Stack_adt__is_empty__s.s)))))) = 0) );
   #"stack_adt.adb" 5 0 0# raise Return__exc ) );
   #"stack_adt.adb" 4 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"stack_adt.adb" 4 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  stack_adt__is_empty__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_full" defined at stack_adt.ads:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack_adt__is_full__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Stack_adt__index
 use        Stack_adt__index__rep
 use        Stack_adt__stack
 use        Stack_adt__stack___axiom
 use        Stack_adt__is_full__s
 use        Stack_adt__is_full__s___axiom
 use        Stack_adt__index___axiom
 use        Stack_adt__stack___axiom

 val stack_adt__is_full__result #"stack_adt.ads" 7 0 0# "model_projected" "model_trace:2524@result"  : bool__ref 
 
 let def #"stack_adt.ads" 7 0 0# "W:diverges:N" "GP_Subp:stack_adt.ads:7" 
   (__void_param : unit)
  requires { #"stack_adt.ads" 7 0 0# true }
  ensures { #"stack_adt.ads" 7 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram stack_adt.ads:7 *)
  ;
  #"stack_adt.ads" 4 0 0# assume { #"stack_adt.ads" 4 0 0# (Stack_adt__stack___axiom.dynamic_invariant Stack_adt__is_full__s.s True False True) };
  #"stack_adt.ads" 7 0 0# assume { #"stack_adt.ads" 7 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stack_adt.ads:7 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stack_adt.ads:7 *)
  ;
  #"stack_adt.ads" 7 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stack_adt.ads:7 *)
  ;
  #"stack_adt.ads" 7 0 0# assume { #"stack_adt.ads" 7 0 0# true };
  #"stack_adt.ads" 7 0 0# try
   ( ( "GP_Sloc:stack_adt.adb:8:15" ( #"stack_adt.adb" 8 0 0# stack_adt__is_full__result.bool__content <- ( ((Stack_adt__index__rep.to_rep((Stack_adt__stack.rec__stack_adt__stack__size((Stack_adt__stack.__split_fields(Stack_adt__is_full__s.s)))))) = 256) );
   #"stack_adt.adb" 8 0 0# raise Return__exc ) );
   #"stack_adt.adb" 7 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"stack_adt.adb" 7 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  stack_adt__is_full__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "clear" defined at stack_adt.ads:9, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack_adt__clear__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Stack_adt__index
 use        Stack_adt__index__rep
 use        Stack_adt__stack
 use        Stack_adt__stack___axiom
 use        Stack_adt__is_empty
 use        Stack_adt__is_empty___axiom
 use        Stack_adt__clear__s
 use        Stack_adt__is_empty___axiom
 use        Stack_adt__clear__s___axiom
 use        Stack_adt__index___axiom
 use        Stack_adt__stack___axiom

 let def #"stack_adt.adb" 7 0 0# "W:diverges:N" "GP_Subp:stack_adt.ads:9" 
   (__void_param : unit)
  requires { #"stack_adt.adb" 7 0 0# true }
  ensures { #"stack_adt.adb" 7 0 0# ( #"stack_adt.ads" 11 0 0# "model_vc_post" "keep_on_simp" "GP_Sloc:stack_adt.ads:11:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:1" "comment:       Post => Is_Empty(S);
               ^ stack_adt.ads:11:16:VC_POSTCONDITION" "GP_Shape:pragargs__call_is_empty" ( "GP_Pretty_Ada:2731" "GP_Sloc:stack_adt.ads:11:16" ((epsilon temp___result_177 : bool.
   ( (temp___result_177 = (Stack_adt__is_empty.is_empty { Stack_adt__stack.__split_fields = Stack_adt__clear__s.s__split_fields.Stack_adt__stack.__split_fields__content })) /\ (Stack_adt__is_empty.is_empty__function_guard temp___result_177 { Stack_adt__stack.__split_fields = Stack_adt__clear__s.s__split_fields.Stack_adt__stack.__split_fields__content }) )) = True) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram stack_adt.ads:9 *)
  ;
  #"stack_adt.ads" 4 0 0# assume { #"stack_adt.ads" 4 0 0# (Stack_adt__stack___axiom.dynamic_invariant { Stack_adt__stack.__split_fields = Stack_adt__clear__s.s__split_fields.Stack_adt__stack.__split_fields__content } True False True) };
  #"stack_adt.ads" 28 0 0# assume { #"stack_adt.ads" 28 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stack_adt.ads:9 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stack_adt.ads:9 *)
  ;
  #"stack_adt.ads" 28 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stack_adt.ads:9 *)
  ;
  #"stack_adt.ads" 28 0 0# assume { #"stack_adt.ads" 28 0 0# true };
  #"stack_adt.ads" 28 0 0# try
   ( ( "GP_Sloc:stack_adt.adb:12:14" (let temp___174 = (let temp___173 = { Stack_adt__stack.__split_fields = Stack_adt__clear__s.s__split_fields.Stack_adt__stack.__split_fields__content } in (
    ( #"stack_adt.ads" 28 0 0# abstract ensures {true}(let _ = (Stack_adt__stack.rec__stack_adt__stack__size((Stack_adt__stack.__split_fields(temp___173)))) in (
     ()))
     end ;
    { ( temp___173 ) with Stack_adt__stack.__split_fields = { ( (Stack_adt__stack.__split_fields(temp___173)) ) with Stack_adt__stack.rec__stack_adt__stack__size = (Stack_adt__index__rep.of_rep(0)) } } )))
    in (
    #"stack_adt.adb" 12 0 0# Stack_adt__clear__s.s__split_fields.Stack_adt__stack.__split_fields__content <- ( (Stack_adt__stack.__split_fields(temp___174)) )))
    );
   #"stack_adt.adb" 10 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"stack_adt.adb" 10 0 0# abstract ensures {true}(let _ = (Stack_adt__is_empty___axiom.is_empty({ Stack_adt__stack.__split_fields = Stack_adt__clear__s.s__split_fields.Stack_adt__stack.__split_fields__content })) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "push" defined at stack_adt.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack_adt__push__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Stack_adt__index
 use        Stack_adt__index__rep
 use        Array__Int__Standard__integer
 use        Stack_adt__stack
 use        Stack_adt__stack___axiom
 use        Stack_adt__is_empty
 use        Stack_adt__is_empty___axiom
 use        Stack_adt__is_full
 use        Stack_adt__is_full___axiom
 use        Stack_adt__push__s
 use        Stack_adt__push__x
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Stack_adt__is_empty___axiom
 use        Stack_adt__is_full___axiom
 use        Stack_adt__push__s___axiom
 use        Stack_adt__push__x___axiom
 use        Stack_adt__index___axiom
 use        Stack_adt__stack___axiom

 let def #"stack_adt.ads" 28 0 0# "W:diverges:N" "GP_Subp:stack_adt.ads:13" 
   (__void_param : unit)
  requires { #"stack_adt.ads" 28 0 0# true }
  ensures { #"stack_adt.ads" 28 0 0# ( #"stack_adt.ads" 16 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:stack_adt.ads:16:16" "GP_Id:3" "comment:       Post => not Is_Empty(S);
               ^ stack_adt.ads:16:16:VC_POSTCONDITION" "GP_Shape:pragargs__not" ( "GP_Pretty_Ada:2761" "GP_Sloc:stack_adt.ads:16:16" not ( ((epsilon temp___result_186 : bool.
   ( (temp___result_186 = (Stack_adt__is_empty.is_empty { Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content })) /\ (Stack_adt__is_empty.is_empty__function_guard temp___result_186 { Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content }) )) = True) ) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram stack_adt.ads:13 *)
  ;
  #"stack_adt.ads" 4 0 0# assume { #"stack_adt.ads" 4 0 0# (Stack_adt__stack___axiom.dynamic_invariant { Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content } True False True) };
  #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__integer___axiom.dynamic_invariant Stack_adt__push__x.x True False True) };
  #"stack_adt.ads" 13 0 0# assume { #"stack_adt.ads" 13 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stack_adt.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stack_adt.ads:13 *)
  ;
  #"stack_adt.ads" 13 0 0# abstract ensures {true}(let _ = not ( (Stack_adt__is_full___axiom.is_full({ Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content })) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stack_adt.ads:13 *)
  ;
  #"stack_adt.ads" 28 0 0# assume { #"stack_adt.ads" 28 0 0# not ( ((epsilon temp___result_185 : bool.
   ( (temp___result_185 = (Stack_adt__is_full.is_full { Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content })) /\ (Stack_adt__is_full.is_full__function_guard temp___result_185 { Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content }) )) = True) ) };
  #"stack_adt.ads" 28 0 0# try
   ( ( "GP_Sloc:stack_adt.adb:17:22" (let temp___180 = (let temp___179 = { Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content } in (
    ( #"stack_adt.ads" 28 0 0# abstract ensures {true}(let _ = (Stack_adt__stack.rec__stack_adt__stack__vect((Stack_adt__stack.__split_fields(temp___179)))) in (
     ()))
     end ;
    { ( temp___179 ) with Stack_adt__stack.__split_fields = { ( (Stack_adt__stack.__split_fields(temp___179)) ) with Stack_adt__stack.rec__stack_adt__stack__vect = (let temp___178 = (Stack_adt__stack.rec__stack_adt__stack__vect (Stack_adt__stack.__split_fields { Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content })) in (
     (Array__Int__Standard__integer.set((Stack_adt__stack.rec__stack_adt__stack__vect (Stack_adt__stack.__split_fields { Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content }))) ((Stack_adt__index__rep.to_rep((Stack_adt__stack.rec__stack_adt__stack__size((Stack_adt__stack.__split_fields({ Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content }))))))) ((Standard__integer__rep.of_rep(Stack_adt__push__x.x))))))
     } } )))
    in (
    #"stack_adt.adb" 17 0 0# Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content <- ( (Stack_adt__stack.__split_fields(temp___180)) )))
    );
   ( "GP_Sloc:stack_adt.adb:18:14" (let temp___182 = (let temp___181 = { Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content } in (
    ( #"stack_adt.ads" 28 0 0# abstract ensures {true}(let _ = (Stack_adt__stack.rec__stack_adt__stack__size((Stack_adt__stack.__split_fields(temp___181)))) in (
     ()))
     end ;
    { ( temp___181 ) with Stack_adt__stack.__split_fields = { ( (Stack_adt__stack.__split_fields(temp___181)) ) with Stack_adt__stack.rec__stack_adt__stack__size = (Stack_adt__index__rep.of_rep(( #"stack_adt.adb" 18 0 0# "model_vc" "keep_on_simp" "GP_Sloc:stack_adt.adb:18:24" "GP_Reason:VC_RANGE_CHECK" "GP_Id:2" "comment:      S.Size := S.Size + 1;
                       ^ stack_adt.adb:18:24:VC_RANGE_CHECK" "GP_Shape:s_assign__add" (Stack_adt__index.range_check_(((Stack_adt__index__rep.to_rep((Stack_adt__stack.rec__stack_adt__stack__size((Stack_adt__stack.__split_fields({ Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content })))))) + 1))) ))) } } )))
    in (
    #"stack_adt.adb" 18 0 0# Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content <- ( (Stack_adt__stack.__split_fields(temp___182)) )))
    );
   #"stack_adt.adb" 15 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"stack_adt.adb" 15 0 0# abstract ensures {true}(let _ = not ( (Stack_adt__is_empty___axiom.is_empty({ Stack_adt__stack.__split_fields = Stack_adt__push__s.s__split_fields.Stack_adt__stack.__split_fields__content })) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "pop" defined at stack_adt.ads:18, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack_adt__pop__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Stack_adt__index
 use        Stack_adt__index__rep
 use        Array__Int__Standard__integer
 use        Stack_adt__stack
 use        Stack_adt__stack___axiom
 use        Stack_adt__is_empty
 use        Stack_adt__is_empty___axiom
 use        Stack_adt__is_full
 use        Stack_adt__is_full___axiom
 use        Stack_adt__pop__s
 use        Stack_adt__pop__x
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Stack_adt__is_empty___axiom
 use        Stack_adt__is_full___axiom
 use        Stack_adt__pop__s___axiom
 use        Stack_adt__pop__x___axiom
 use        Stack_adt__index___axiom
 use        Stack_adt__stack___axiom

 let def #"stack_adt.ads" 28 0 0# "W:diverges:N" "GP_Subp:stack_adt.ads:18" 
   (__void_param : unit)
  requires { #"stack_adt.ads" 28 0 0# true }
  ensures { #"stack_adt.ads" 28 0 0# ( #"stack_adt.ads" 21 0 0# "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__not" "GP_Sloc:stack_adt.ads:21:16" "GP_Id:5" "comment:       Post => not Is_Full(S);
               ^ stack_adt.ads:21:16:VC_POSTCONDITION" ( "GP_Pretty_Ada:2798" "GP_Sloc:stack_adt.ads:21:16" not ( ((epsilon temp___result_193 : bool.
   ( (temp___result_193 = (Stack_adt__is_full.is_full { Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content })) /\ (Stack_adt__is_full.is_full__function_guard temp___result_193 { Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content }) )) = True) ) ) ) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram stack_adt.ads:18 *)
  ;
  #"stack_adt.ads" 4 0 0# assume { #"stack_adt.ads" 4 0 0# (Stack_adt__stack___axiom.dynamic_invariant { Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content } True False True) };
  #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__integer___axiom.dynamic_invariant Stack_adt__pop__x.x.int__content False False True) };
  #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stack_adt.ads:18 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stack_adt.ads:18 *)
  ;
  #"system.ads" 1 0 0# abstract ensures {true}(let _ = not ( (Stack_adt__is_empty___axiom.is_empty({ Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content })) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stack_adt.ads:18 *)
  ;
  #"stack_adt.ads" 28 0 0# assume { #"stack_adt.ads" 28 0 0# not ( ((epsilon temp___result_192 : bool.
   ( (temp___result_192 = (Stack_adt__is_empty.is_empty { Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content })) /\ (Stack_adt__is_empty.is_empty__function_guard temp___result_192 { Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content }) )) = True) ) };
  #"stack_adt.ads" 28 0 0# try
   ( ( "GP_Sloc:stack_adt.adb:23:14" (let temp___188 = (let temp___187 = { Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content } in (
    ( #"stack_adt.ads" 28 0 0# abstract ensures {true}(let _ = (Stack_adt__stack.rec__stack_adt__stack__size((Stack_adt__stack.__split_fields(temp___187)))) in (
     ()))
     end ;
    { ( temp___187 ) with Stack_adt__stack.__split_fields = { ( (Stack_adt__stack.__split_fields(temp___187)) ) with Stack_adt__stack.rec__stack_adt__stack__size = (Stack_adt__index__rep.of_rep(( #"stack_adt.adb" 23 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:stack_adt.adb:23:24" "GP_Id:4" "comment:      S.Size := S.Size - 1;
                       ^ stack_adt.adb:23:24:VC_RANGE_CHECK" "GP_Shape:s_assign__sub" (Stack_adt__index.range_check_(((Stack_adt__index__rep.to_rep((Stack_adt__stack.rec__stack_adt__stack__size((Stack_adt__stack.__split_fields({ Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content })))))) - 1))) ))) } } )))
    in (
    #"stack_adt.adb" 23 0 0# Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content <- ( (Stack_adt__stack.__split_fields(temp___188)) )))
    );
   ( "GP_Sloc:stack_adt.adb:24:9" #"stack_adt.adb" 24 0 0# Stack_adt__pop__x.x.int__content <- ( (Standard__integer__rep.to_rep((let temp___189 = (Stack_adt__stack.rec__stack_adt__stack__vect((Stack_adt__stack.__split_fields({ Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content })))) in (
    (Array__Int__Standard__integer.get(temp___189) ((Stack_adt__index__rep.to_rep((Stack_adt__stack.rec__stack_adt__stack__size((Stack_adt__stack.__split_fields({ Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content }))))))))))
   )) ) );
   #"stack_adt.adb" 21 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"stack_adt.adb" 21 0 0# abstract ensures {true}(let _ = not ( (Stack_adt__is_full___axiom.is_full({ Stack_adt__stack.__split_fields = Stack_adt__pop__s.s__split_fields.Stack_adt__stack.__split_fields__content })) ) in (
   ()))
   end  )
end
